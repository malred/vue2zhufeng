{"version":3,"file":"vue.js","sources":["../src/utils.js","../src/globalApi.js","../src/observe/dep.js","../src/observe/array.js","../src/observe/index.js","../src/observe/watcher.js","../src/state.js","../src/compile/parse.js","../src/compile/index.js","../src/vdom/index.js","../src/vdom/patch.js","../src/lifecycle.js","../src/init.js","../src/index.js"],"sourcesContent":["const strats = {}\r\nconst LIFECYCLE = [\r\n    'beforeCreate',\r\n    'create'\r\n]\r\nLIFECYCLE.forEach(hook => {\r\n    strats[hook] = function (p, c) {\r\n        if (c) {\r\n            // 如果儿子有,父亲有,就拼在一起\r\n            if (p) {\r\n                return p.concat(c)\r\n            } else {\r\n                return [c] // 儿子有,父亲没有,则将儿子包装为数组\r\n            }\r\n        } else {\r\n            return p // 如果儿子没有,则用父亲即可\r\n        }\r\n    }\r\n})\r\n// 解决全局和局部声明同一组件的情况 \r\nstrats.components = function (parentValue, childValue) {\r\n    const res = Object.create(parentValue)\r\n    if (childValue) {\r\n        for (let key in childValue) {\r\n            // 返回的是构造的对象,可以拿到父亲身上的属性,并且将儿子的都拷贝到自己身上\r\n            res[key] = childValue[key]\r\n        }\r\n    }\r\n    return res\r\n}\r\nexport function mergeOptions(p, c) {\r\n    const options = {}\r\n    for (let key in p) {\r\n        // 获取老的\r\n        margeField(key)\r\n    }\r\n    for (let key in c) {\r\n        if (!p.hasOwnProperty(key)) {\r\n            margeField(key)\r\n        }\r\n    }\r\n    function margeField(key) {\r\n        // 用策略模式减少if/else\r\n        if (strats[key]) { \r\n            options[key] = strats[key](p[key], c[key])\r\n        } else {\r\n            // 不在策略中,则以儿子为主\r\n            options[key] = c[key] || p[key]\r\n        }\r\n    }\r\n    return options\r\n}","import { mergeOptions } from \"./utils\"\r\n\r\nexport function initGlobalAPI(Vue) {\r\n    Vue.options = {\r\n        // Vue构造函数挂到全局\r\n        _base: Vue\r\n    }\r\n    Vue.mixin = function (mixin) {\r\n        this.options = mergeOptions(this.options, mixin)\r\n        return this\r\n    }\r\n    // console.log(Vue.options);\r\n    Vue.extend = function (options) {\r\n        // console.log(options);\r\n        function Sub(options = {}) { // 最终使用一个组件,就是new一个实例\r\n            // console.log(options,Sub.options);\r\n            // options = mergeOptions(Sub.options,options)\r\n            this._init(options) // 默认对子类进行初始化操作\r\n            // console.log(this._init,this.$mount);\r\n        }\r\n        // 子类可以找到父类原型 Sub.prototype.__proto__ = Vue.prototype\r\n        Sub.prototype = Object.create(Vue.prototype) // object.create 但是此时Sub的构造器用的是父类的\r\n        // console.log(Vue.prototype, Sub.prototype,Object.create(Vue.prototype));\r\n        Sub.prototype.constructor = Sub\r\n        // console.log(Sub.prototype.__proto__);\r\n        // Sub.prototype.__proto__ = Vue.prototype\r\n        Sub.options = mergeOptions(Vue.options, options) // 保存用户传的选项\r\n        return Sub\r\n    }\r\n    // 声明全局组件\r\n    Vue.options.components = {}\r\n    Vue.component = function (id, definition) {\r\n        // 如果definition是函数,说明用户调用了extend()\r\n        definition =\r\n            typeof definition === 'function' ? definition : Vue.extend(definition)\r\n        Vue.options.components[id] = definition\r\n        // console.log(Vue.options.components);\r\n    }\r\n}","let id = 0 // 用于唯一标识dep \r\nclass Dep {\r\n    constructor() {\r\n        this.id = id++\r\n        this.subs = [] // 存放当前属性对应的watcher有哪些\r\n    }\r\n    depend() {\r\n        // 不希望加重复的watcher\r\n        // this.subs.push(Dep.target)\r\n        // debugger\r\n        Dep.target.addDep(this) // 让watcher记住dep\r\n    }\r\n    addSub(watcher) {\r\n        // 在watcher里有去重\r\n        this.subs.push(watcher)\r\n    }\r\n    // 更新方法!\r\n    notify() {\r\n        // 让所有watcher更新数据\r\n        this.subs.forEach(watcher => watcher.update())\r\n    }\r\n}\r\nDep.target = null \r\n// 这个stack是共用的\r\n// 只有一个watcher时,其实和之前没有差别\r\n// 改为将watcher放入栈,target指向最后放入的watcher\r\nlet stack = []\r\n// 渲染前入栈\r\nexport function pushTarget(watcher) {\r\n    stack.push(watcher)\r\n    Dep.target = watcher\r\n    // console.log(stack)\r\n}\r\n// 渲染后出栈\r\nexport function popTarget() {\r\n    stack.pop()\r\n    Dep.target = stack[stack.length - 1]\r\n}\r\nexport default Dep\r\n","// 重写数组部分方法\r\nlet oldArrayProto = Array.prototype // 获取数组的原型\r\n// newArrayProto = oldArrayProto 拿到了旧原型\r\nexport let newArrayProto = Object.create(oldArrayProto)\r\n// 重写\r\nlet methods = [ // 找到所有的变异方法(可以修改数组的方法)\r\n    // push 将新元素添加到数组的末尾，并返回新的长度\r\n    // pop 删除数组的最后一个元素，并返回该元素 \r\n    // shift 移除数组的第一项 \r\n    // unshift 将新元素添加到数组的开头，并返回新的长度\r\n    // reverse 反转数组中元素的顺序 \r\n    // sort 排序\r\n    // splice 从数组中添加/删除元素\r\n    'push', 'pop',\r\n    'shift', 'unshift',\r\n    'reverse',\r\n    'sort',\r\n    'splice'\r\n]\r\nmethods.forEach(method => {\r\n    // arr.push(1,2,3)\r\n    // 重写方法\r\n    newArrayProto[method] = function (...args) {\r\n        // 调用\r\n        // 内部调用原方法,函数的劫持,切片编程\r\n        const result = oldArrayProto[method].call(this, ...args) // 保留旧方法的逻辑 \r\n        // 对新增的数据再次进行劫持\r\n        let inserted // 是一个数组\r\n        let ob = this.__ob__ // 挂载在data的observer实例,可以使用其更新方法\r\n        switch (method) {\r\n            case 'unshift':\r\n            case 'push':\r\n                inserted = args\r\n                break\r\n            case 'splice': // splice(开始位置,结束位置,{新增数据},{新增数据})\r\n                // 获取新增的数据\r\n                inserted = args.slice(2) // 去掉前两个,拿到剩下的\r\n                break\r\n            default:\r\n                break\r\n        }\r\n        // console.log(inserted)\r\n        if (inserted) {\r\n            // console.log(this)\r\n            // 数组转响应式\r\n            this.__ob__.observeArray(inserted)\r\n        }\r\n        // 数组变化,更新依赖收集\r\n        ob.dep.notify()\r\n        return result\r\n    }\r\n})","import { newArrayProto } from \"./array\"\r\nimport Dep from './dep'\r\n// 观察data对象的类\r\nclass Observer {\r\n    constructor(data) {\r\n        // data可能是对象或数组\r\n        // 如果对象或数组新增数据,希望也能进行更新,所以给数组或对象本身添加dep\r\n        this.dep = new Dep()\r\n\r\n        Object.defineProperty(data, '__ob__', {\r\n            value: this,\r\n            // 如果data是对象,则加上__ob__后,会一直进行响应式处理walk(在构造函数调用了),然后栈溢出\r\n            enumerable: false // 不可枚举,(循环时无法获取)\r\n        })\r\n        // 把observer实例挂载到data,则array.js也可以使用observer的观测数组方法\r\n        // 如果data上有一个__ob__属性,则说明被观测过\r\n        // data.__ob__ = this\r\n        if (Array.isArray(data)) {\r\n            // 如果data是数组\r\n            // 可以保留数组的特性,重写数组的部分方法 7个变异方法 可以修改数组本身\r\n            // data.__proto__ = { // 这样重新指定原型链,会导致数组原有属性和方法的缺失\r\n            //     push() {\r\n            //         // 重写push\r\n            //         console.log('push')\r\n            //     }\r\n            // }\r\n            data.__proto__ = newArrayProto\r\n            this.observeArray(data)\r\n            return\r\n        }\r\n        // Object.defineProperty只能劫持已经存在的属性 (vue里提供了专门的api($set $delete ...)来解决)\r\n        this.walk(data)\r\n    }\r\n    walk(data) { // 循环对象,对属性依次劫持\r\n        // 重新定义属性(vue2的性能瓶颈所在),每个变量都添加get/set监听\r\n        Object.keys(data).forEach(key => defineReactive(data, key, data[key]))\r\n    }\r\n    // 观测,对数组和数组里的对象进行响应式处理\r\n    observeArray(data) {\r\n        data.forEach(item => observe(item))\r\n    }\r\n}\r\nfunction dependArray(value) {\r\n    for (let i = 0; i < value.length; i++) {\r\n        let current = value[i]\r\n        current.__ob__ && current.__ob__.dep.depend()\r\n        // 如果数组里有数组,而且还有数组,就继续依赖收集\r\n        if (Array.isArray(current)) {\r\n            dependArray(current)\r\n        }\r\n    }\r\n}\r\n// 对象转响应式的方法(重新定义)\r\nexport function defineReactive(target, key, value) { // 闭包 属性劫持\r\n    // value可能是一个对象,需要对其进行响应式处理\r\n    let childOb = observe(value) // 递归了,性能也会降低\r\n    // childOb.dep是用来收集依赖的,childOb是observe方法返回的Observe实例对象\r\n    let dep = new Dep() // 此时每个属性都有dep \r\n    Object.defineProperty(target, key, {\r\n        // 内部使用了外部的变量(value),所以value被保存到闭包\r\n        // 取值时执行\r\n        get() {\r\n            // 在模板里取值时(mount)才会依赖收集(此时有watcher,watcher把dep.target赋值为自己)\r\n            if (Dep.target) {\r\n                // 每个属性的dep是不同的\r\n                dep.depend() // 属性的收集器记住当前watcher\r\n                if (childOb) { // 如果有childOb(非对象和被代理过的不会产生Observer实例)\r\n                    childOb.dep.depend() // (数组或对象)进行依赖收集\r\n                    if (Array.isArray(value)) { // 解决数组嵌套数组无法依赖收集的问题\r\n                        // 如果是数组\r\n                        dependArray(value)\r\n                    }\r\n                }\r\n            }\r\n            return value\r\n        },\r\n        // 修改时执行\r\n        set(newValue) {\r\n            if (newValue === value) return\r\n            observe(newValue) // 设置值时,如果是对象,也需要转响应式!  \r\n            value = newValue\r\n            dep.notify()  // 通知更新\r\n        }\r\n    })\r\n}\r\nexport function observe(data) {\r\n    // debugger\r\n    // console.log(data)\r\n    // 如果data不是对象\r\n    if (typeof data !== 'object' || data == null) {\r\n        return // 只对对象进行劫持\r\n    }\r\n    if (data.__ob__ instanceof Observer) {\r\n        // 说明被代理过\r\n        return data.__ob__\r\n    }\r\n    // 对data对象进行劫持\r\n    // 判断是否被劫持 => 通过一个专门的实例来观测判断\r\n    return new Observer(data)\r\n}","import Dep, { popTarget, pushTarget } from \"./dep\"\r\nlet id = 0 // 唯一标识watcher\r\n// 1,渲染watcher时,把当前渲染的watcher放到dep.target\r\n// 2,调用_render() 会取值,走到属性的get上\r\nclass Watcher { // 不同组件有不同的watcher\r\n    // 传入vm和更新方法\r\n    constructor(vm, exprOrFn, options, cb) {\r\n        // console.log(fn)\r\n        this.id = id++\r\n        this.renderWatcher = options // 是一个渲染watcher\r\n        this.cb = cb // 获取用户定义的watch回调|处理逻辑\r\n        if (typeof exprOrFn == \"string\") {\r\n            // 字符串\r\n            this.getter = function () {\r\n                return vm[exprOrFn] // vm.xxx\r\n            }\r\n        } else {\r\n            this.getter = exprOrFn // getter意味着调用这个函数可以发生取值操作\r\n        }\r\n        this.deps = [] // 后续实现计算属性和清理工作用得到\r\n        this.depIds = new Set() // 保存dep的id(多个),set集合可以去重\r\n        this.lazy = options.lazy // 是否立刻执行fn\r\n        this.dirty = this.lazy // 标记脏,是否第一次执行\r\n        this.vm = vm\r\n        // 拿到初始值\r\n        this.value = this.lazy ? undefined : this.get() // init get\r\n        this.user = options.user// 标识是不是用户自己的watch\r\n    }\r\n    addDep(dep) { // 一个组件有多个属性,重复的不用记录\r\n        let id = dep.id\r\n        if (!this.depIds.has(id)) {\r\n            // watcher记录dep\r\n            this.deps.push(dep)\r\n            this.depIds.add(id)\r\n            // 此时让dep记录watcher\r\n            dep.addSub(this)\r\n        }\r\n    }\r\n    evaluate() {\r\n        // 用户传入的get方法 \r\n        // console.log(this)\r\n        this.value = this.get() // 用户get函数的返回值 \r\n        this.dirty = false // 如果再次取值,则state.js里的判断会false,不会再次触发this.get\r\n    }\r\n    // 更新\r\n    get() {\r\n        pushTarget(this)\r\n        // Dep.target = this // 当前的watcher给dep\r\n        let value = this.getter.call(this.vm) // 会从vm上取值\r\n        // console.log(value)\r\n        // console.log(this.getter)\r\n        popTarget()\r\n        // Dep.target = null // 渲染完清空\r\n        return value // 计算属性执行的是用户传入的getter,返回值就是计算属性的值\r\n    }\r\n    depend() {\r\n        let i = this.deps.length\r\n        while (i--) {\r\n            // dep.depend()\r\n            // dep依赖渲染watcher和计算属性watcher,都需要收集\r\n            this.deps[i].depend() // 让计算属性watcher也收集渲染watcher\r\n        }\r\n    }\r\n    update() {\r\n        if (this.lazy) {\r\n            // 如果是计算属性,依赖的值变化了,会触发计算属性watcher的update方法\r\n            this.dirty = true // 标记为true,可以更新(state.js)\r\n            // console.log(1) \r\n            return\r\n        }\r\n        // 多次更新同一个数据,则应该用队列记录,只更新最后一次\r\n        queryWatcher(this) // 暂存watcher\r\n        // this.get() // 重新渲染\r\n    }\r\n    run() {\r\n        let oldValue = this.value\r\n        // 此时最终的vm.name已经赋值完毕(ls5),更新时取值,就是最后的这个值\r\n        let newVal = this.get()\r\n        if (this.user) {\r\n            // watch调用用户定义的处理逻辑\r\n            this.cb.call(this.vm, newVal, oldValue)\r\n        }\r\n    }\r\n}\r\n// 需要给每个属性添加一个dep,目的是收集watcher\r\n// 一个组件中,有多个属性(n个属性对应一个视图) n个dep对应一个watcher\r\n// 一个属性,对应多个组件,一个dep对应多个watcher\r\n// 多对多\r\nlet queue = [] // 源码是用set来去重\r\n// 这里使用对象来去重\r\nlet has = {}\r\nlet pending = false // 防抖\r\n// 等待一段时间后进入该方法,一次性更新\r\nfunction flushSchedulerQueue() {\r\n    let flushQueue = queue.slice(0)\r\n    // 刷新过程中,可能也有新的watcher,可以重新放到queue\r\n    queue = []\r\n    has = {}\r\n    pending = false\r\n    flushQueue.forEach(q => q.run())\r\n}\r\nfunction queryWatcher(watcher) {\r\n    const id = watcher.id\r\n    if (!has[id]) {\r\n        // 没有重复,直接放入队列\r\n        queue.push(watcher)\r\n        has[id] = true\r\n        // console.log(queue)\r\n    }\r\n    // 不管update多少次,最终只执行一轮刷新操作\r\n    if (!pending) {\r\n        setTimeout(flushSchedulerQueue, 0);\r\n        pending = true\r\n    }\r\n}\r\n// 用户更新队列\r\nlet callbacks = []\r\nlet waiting = false\r\n// 异步批处理\r\nfunction flushCallbacks() {\r\n    let cbs = callbacks.slice(0)\r\n    waiting = false\r\n    callbacks = []\r\n    cbs.forEach(cb => cb())\r\n}\r\nlet timerFunc\r\n// 有bug,promise拿到的还是老的\r\n// if (Promise) { // 判断有没有promise(可以转字符串看是不是原生promise)\r\n//     // console.log('Promise')\r\n//     timerFunc = () => {\r\n//         Promise.resolve().then(flushCallbacks)\r\n//     }\r\n// } else if (MutationObserver) {\r\n//     // 这里传入的回调是异步的\r\n//     let observe = new MutationObserver(flushCallbacks)\r\n//     // 监控文本变化\r\n//     let textNode = document.createTextNode(1)\r\n//     observe.observe(textNode, {\r\n//         characterData: true,\r\n//     })\r\n//     timerFunc = () => {\r\n//         textNode.textContent = 2\r\n//     }\r\n// } else if (setImmediate) {\r\n//     timerFunc = () => {\r\n//         setImmediate(flushCallbacks)\r\n//     }\r\n// } else {\r\n//     timerFunc = () => {\r\n//         setTimeout(flushCallbacks)\r\n//     }\r\n// }\r\n// 暴露给外部的更新方法\r\n// vue里的nextTick不是用api(定时器...),而是采用优雅降级的方式\r\n// 降级: promise(ie不兼容) => MutationObserver(h5的api) => setImmediate(ie专用) => setTimeout\r\nexport function nextTick(cb) {\r\n    // 先用户还是先内部更新 ? => 看用户更新方法在前,还是数据变化在前\r\n    // 定时器耗性能,promise执行比定时器快\r\n    callbacks.push(cb)\r\n    if (!waiting) {\r\n        setTimeout(() => {\r\n            flushCallbacks()\r\n        }, 0)\r\n        // timerFunc(flushCallbacks) \r\n        // timerFunc() // 执行的就是flushCallbacks\r\n        waiting = true\r\n    }\r\n}\r\nexport default Watcher","import { initMixin } from \"./init\"\r\nimport Dep from \"./observe/dep\"\r\nimport { observe } from \"./observe/index\"\r\nimport Watcher, { nextTick } from \"./observe/watcher\"\r\n\r\n// 对options内属性和方法进行操作 \r\nexport function initState(vm) {\r\n    const opts = vm.$options\r\n    // debugger\r\n    if (opts.data) {\r\n        // data数据的初始化\r\n        initData(vm)\r\n    }\r\n    // console.log(vm.$options)\r\n    if (opts.computed) {\r\n        // 计算属性初始化\r\n        initComputed(vm)\r\n    } if (opts.watch) {\r\n        // watch的初始化\r\n        initWatch(vm)\r\n    }\r\n}\r\n// 代理取值和设置值,通过响应式的方法来改变实际操作的值\r\nfunction proxy(vm, target, key) {\r\n    Object.defineProperty(vm, key, {\r\n        get() {\r\n            // 返回vm[_data][key] (vm._data.key)\r\n            return vm[target][key]\r\n        },\r\n        set(newValue) {\r\n            if (newValue === vm[target][key]) {\r\n                return\r\n            }\r\n            vm[target][key] = newValue\r\n        }\r\n    })\r\n}\r\n// 数据初始化(转为响应式)\r\nfunction initData(vm) {\r\n    let data = vm.$options.data\r\n    // 如果data是函数,就调用并获取其返回值\r\n    data = typeof data === 'function' ? data.call(this) : data\r\n    // data挂载到vm上\r\n    vm._data = data\r\n    // debugger\r\n    // 数据劫持 \r\n    observe(data) // 监听数据变化\r\n    // 将vm._data代理,则用户操作值只需要vm.xxx(而不是vm._data.xxx)\r\n    for (let key in data) {\r\n        proxy(vm, '_data', key)\r\n    }\r\n}\r\n// 计算属性初始化\r\nfunction initComputed(vm) {\r\n    // 拿到用户定义的计算属性(有两种写法)\r\n    const computed = vm.$options.computed\r\n    // console.log(computed)\r\n    // 挂载到vm\r\n    let watchers = vm._computedWatchers = {} // 保存不同计算属性的watcher\r\n    // 拿到computed里定义的计算属性\r\n    for (let key in computed) {\r\n        let userDef = computed[key]\r\n        // 缓存\r\n        // 需要监控计算属性中get(依赖的属性)的变化\r\n        let fn = typeof userDef === 'function' ? userDef : userDef.get\r\n        // 直接new,会走fn,所以用lazy来标识不需要立刻执行fn\r\n        watchers[key] = new Watcher(vm, fn, { lazy: true }) // 将计算属性和watcher对应起来\r\n        defineComputed(vm, key, userDef)\r\n    }\r\n}\r\n// 定义计算属性\r\nfunction defineComputed(target, key, userDef) {\r\n    // 判断计算属性是函数还是对象\r\n    // const getter = typeof userDef === 'function' ? userDef : userDef.get\r\n    const setter = userDef.set || (() => { })\r\n    // console.log(getter, setter)\r\n    // 可以通过实例(target[vm])获取对应属性 \r\n    Object.defineProperty(target, key, {\r\n        // this指向vm \r\n        get: createComputedGetter(key),\r\n        set: setter\r\n    })\r\n}\r\n// 注意: 计算属性不会收集依赖,只会让自己的依赖属性去收集依赖\r\n// 包装一下getter,判断是不是重复get了\r\nfunction createComputedGetter(key) {\r\n    // 检测是否要执行getter\r\n    return function () {\r\n        // this指向vm\r\n        // 拿到对应属性的watcher (计算属性watcher)\r\n        // console.log(this, key) \r\n        const watcher = this._computedWatchers[key]\r\n        if (watcher.dirty) {\r\n            // 如果是dirty,就执行用户传入的函数\r\n            watcher.evaluate() // 调用完会设置dirty为false\r\n        }\r\n        if (Dep.target) {\r\n            // 计算属性出栈后,还要渲染,需要记录渲染watcher来更新视图\r\n            watcher.depend()\r\n        }\r\n        // console.log(this.value)\r\n        return watcher.value // 返回watcher上的值\r\n    }\r\n}\r\nfunction initWatch(vm) {\r\n    let watch = vm.$options.watch\r\n    // console.log(watch)\r\n    for (let key in watch) {\r\n        // 三种情况: 字符串,数组,函数 (其实也可以是对象,但是这里不考虑)\r\n        const handler = watch[key]\r\n        // 如果是数组\r\n        if (Array.isArray(handler)) {\r\n            for (let i = 0; i < handler.length; i++) {\r\n                createWatcher(vm, key, handler[i])\r\n            }\r\n        } else {\r\n            // 如果不是数组\r\n            createWatcher(vm, key, handler)\r\n        }\r\n    }\r\n}\r\n// 创建watch\r\nfunction createWatcher(vm, key, handler) {\r\n    // 字符串,数组,函数\r\n    if (typeof handler === 'string') {\r\n        handler = vm[handler]\r\n    }\r\n    return vm.$watch(key, handler)\r\n}\r\nexport function initStateMixin(Vue) {\r\n    Vue.prototype.$nextTick = nextTick // 统一暴露给外部的更新方法\r\n    initMixin(Vue) // 拓展了vue,添加init方法 \r\n    Vue.prototype.$watch = function (exprOrFn, cb, options = {}) {\r\n        // console.log(exprOrFn, cb, options)\r\n        // exprOrFn可能是函数(返回一个函数),也有可能是字符串\r\n        // cb是watch监测的值变化时触发的函数\r\n        new Watcher(this, exprOrFn, { user: true }, cb)\r\n    }\r\n}","// 正则表达式\r\n// vue3采用的不是正则\r\nconst ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*` // 标签名\r\nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})` // 解析 <div:xxx> 形式(带命名空间)的标签\r\nconst startTagOpen = new RegExp(`^<${qnameCapture}`) // 匹配到的分组是一个开始标签名\r\nconst endTag = new RegExp(`^<\\\\/${qnameCapture}[^>]*>`) // 匹配的是</xxx> 最终匹配到的分组是结束标签的名字\r\nconst attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/ // 匹配属性\r\nconst startTagClose = /^\\s*(\\/?)>/ // 匹配 <br/> 这种单标签\r\n// htmlparser2库也可以解析html\r\n/*\r\n{\r\n    tag: 'div',\r\n    type: 1,\r\n    attrs: [{name,age,address}],\r\n    parent: null,\r\n    children:[\r\n        {\r\n                tag: 'span',\r\n                type: 1,\r\n                attrs: [{...}],\r\n                parent: div,\r\n                children:[]\r\n        }\r\n    ]\r\n}\r\n*/\r\nexport function parseHTML(html) { // html必定是<开头(vue2的template不能是字符串,但是vue3可以)\r\n    // 定义虚拟dom的节点类型\r\n    const ELEMENT_TYPE = 1\r\n    const TEXT_TYPE = 3\r\n    const stack = [] // 用于存放元素\r\n    let currentParent // 指向栈中最后一个元素\r\n    let root // 标记根节点\r\n    // 创建虚拟dom的节点\r\n    function createASTElement(tag, attrs) {\r\n        return {\r\n            tag,\r\n            type: ELEMENT_TYPE,\r\n            children: [],\r\n            attrs,\r\n            parent: null\r\n        }\r\n    }\r\n    // 最终需要转化为一颗抽象语法树\r\n    function start(tag, attrs) {\r\n        // console.log(tag, attrs, '开始');\r\n        let node = createASTElement(tag, attrs);\r\n        if (!root) {\r\n            // 如果还没有根节点,则该元素就是根节点\r\n            root = node\r\n        }\r\n        if (currentParent) {\r\n            // 如果有当前节点,则当前节点是新节点的parent\r\n            node.parent = currentParent\r\n            // 子节点的parent要变为currentParent\r\n            currentParent.children.push(node)\r\n        }\r\n        stack.push(node) // 放入栈\r\n        currentParent = node // 指针指向栈中最后一个\r\n    }\r\n    function chars(text) {\r\n        // vue2源码是保留最多两个空格\r\n        text = text.replace(/\\s/g, '') // 去掉空格\r\n        // console.log(text, '文本');\r\n        // 文本直接放入当前指向的节点的children\r\n        text && currentParent.children.push({\r\n            type: TEXT_TYPE,\r\n            text,\r\n            parent: currentParent\r\n        })\r\n    }\r\n    function end(tag) {\r\n        // console.log(tag, '结束');\r\n        // 弹出时,其开始标签和文本内容都被加到根结点的children了\r\n        let node = stack.pop() // 弹出最后一个 // 可以校验标签是否合法\r\n        currentParent = stack[stack.length - 1]\r\n    }\r\n    // 截取html字符串\r\n    function advance(n) {\r\n        html = html.substring(n)\r\n        // console.log(html)\r\n    }\r\n    // 匹配是否是开始标签\r\n    function parseStartTag() { \r\n        const start = html.match(startTagOpen)\r\n        // console.log(start); // {0: '<div', 1: 'div' ,...}\r\n        if (start) {\r\n            const match = {\r\n                // 分组就是标签名\r\n                tagName: start[1],\r\n                attrs: []\r\n            }\r\n            // start[0].length是匹配到的字符串,('<div')\r\n            advance(start[0].length) // 从html删除匹配到的字符串\r\n            // console.log(match) \r\n            // 只要不是开始标签的结束,就一直循环匹配\r\n            let attr, end\r\n            while (!(end = html.match(startTagClose))\r\n                // 将匹配到的内容存入attr\r\n                && (attr = html.match(attribute))) {\r\n                // 因为已经将匹配的内容存放,所以可以删除匹配的字符串\r\n                advance(attr[0].length)\r\n                // console.log(attr);\r\n                match.attrs.push({\r\n                    name: attr[1],\r\n                    // 因为等号两边可能有空格,所以value可能是attr[3]或[4]或[5]\r\n                    value: attr[3] || attr[4] || attr[5] || true // 如果是disable这种没有 = 的,则值是true\r\n                })\r\n            }\r\n            // 如果有 > 这种结束标签,也要删除\r\n            if (end) {\r\n                advance(end[0].length)\r\n            }\r\n            // console.log(match);\r\n            return match\r\n        }\r\n        // console.log(html);\r\n        return false // 不是开始标签\r\n    }\r\n    // 每解析一个,就把解析的内容从html字符串里删除,html删完就是解析完成\r\n    while (html) {\r\n        // debugger\r\n        // 开头是 <的 而下一个开头则是</的< 所以两个 < 之间就是标签的内容\r\n        // 如果indexof的索引是0,则说明是个开始或结束标签\r\n        // 如果indexof的索引大于0,则说明是文本结束位置\r\n        let textEnd = html.indexOf('<')\r\n        if (textEnd == 0) { \r\n            const startTagMatch = parseStartTag()\r\n            if (startTagMatch) { // 解析到开始标签\r\n                // console.log(html);\r\n                start(startTagMatch.tagName, startTagMatch.attrs)\r\n                continue\r\n            }\r\n            // 如果有结束标签\r\n            let endTagMatch = html.match(endTag)\r\n            if (endTagMatch) {\r\n                end(endTagMatch[1])\r\n                advance(endTagMatch[0].length)\r\n                continue\r\n            }\r\n        }\r\n        // 文本内容\r\n        if (textEnd > 0) {\r\n            let text = html.substring(0, textEnd) // 文本内容\r\n            if (text) { // 解析到文本 \r\n                chars(text)\r\n                advance(text.length)\r\n                // console.log(html)\r\n            }\r\n        }\r\n    }\r\n    // console.log(root)\r\n    // console.log(html)\r\n    return root\r\n}","import { parseHTML } from \"./parse\"\r\nconst defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g // 匹配 {{}} \r\nfunction gen(node) {\r\n    // 节点直接生成\r\n    if (node.type === 1) {\r\n        return codegen(node)\r\n    } else {\r\n        // 文本\r\n        let text = node.text\r\n        // 有可能是{{}}或纯文本\r\n        if (!defaultTagRE.test(text)) { // 纯文本\r\n            // stringify是为了加上'',让传入的值变成字符串\r\n            return `_v(${JSON.stringify(text)})`\r\n        } else { // 带插值表达式\r\n            // {{name}}hello => _v(_s(name)+'hello')\r\n            // console.log(text)\r\n            let tokens = []\r\n            // 捕获文本\r\n            let match\r\n            // 如果正则里有g,则再次exec会从上次匹配到的位置开始往后找\r\n            // 重置正则匹配的起始位置\r\n            defaultTagRE.lastIndex = 0\r\n            let lastIndex = 0 // 记录上一次匹配的最后一位\r\n            while (match = defaultTagRE.exec(text)) {\r\n                // console.log(match)\r\n                let index = match.index // 拿到匹配到字符({{)的开始索引\r\n                if (index > lastIndex) {\r\n                    // {{name}} hello {{age}} => hello\r\n                    tokens.push(JSON.stringify(text.slice(lastIndex, index)))\r\n                }\r\n                tokens.push(`_s(${match[1].trim()})`) // 插值表达式里的变量名\r\n                // {{name}} xxx {{age}} -> 0 + name}}.length => 8\r\n                // 下一次匹配到,就可以查看两次匹配中间有没有值 ({{name}} hello {{age}} => hello)\r\n                lastIndex = index + match[0].length\r\n            }\r\n            if (lastIndex < text.length) {\r\n                // {{name}} hello {{age}} world => world\r\n                tokens.push(JSON.stringify(text.slice(lastIndex)))\r\n            }\r\n            // console.log(tokens, `_v(${tokens.join(\"+\")})`)\r\n            return `_v(${tokens.join(\"+\")})`\r\n        }\r\n\r\n    }\r\n}\r\nfunction genChildren(children) {\r\n    return children.map(child => gen(child)).join(',')\r\n}\r\n// 生成属性str的方法\r\nfunction genProps(attrs) {\r\n    let str = '' // {name,value}\r\n    for (let i = 0; i < attrs.length; i++) {\r\n        let attr = attrs[i]\r\n        if (attr.name === 'style') {\r\n            // color:red => {color:'red'}\r\n            let obj = {}\r\n            // color: xxx;font-weight:xxx 多个用;分开\r\n            attr.value.split(';').forEach(item => {\r\n                // color: xxx 单个用:分开\r\n                let [key, value] = item.split(':')\r\n                obj[key] = value // 给obj赋值\r\n            });\r\n            attr.value = obj\r\n        }\r\n        str += `${attr.name}:${JSON.stringify(attr.value)},`\r\n    }\r\n    // slice(开始,结尾),如果是负数则从末尾开始\r\n    // 这里从0取到-1的字符,去掉了最后一个 ,\r\n    return `{${str.slice(0, -1)}}`\r\n}\r\nfunction codegen(ast) {\r\n    // 解析children\r\n    let children = genChildren(ast.children)\r\n    let code = (`_c('${ast.tag}', ${ast.attrs.length > 0 ? genProps(ast.attrs) : 'null'} ${ast.children.length ? `,${children}` : ''})`)\r\n    // console.log(code)\r\n    return code\r\n}\r\n// 编译模板\r\nexport function compileToFunction(template) {\r\n    // console.log(template)\r\n    // 1,将template转化为ast语法树\r\n    let ast = parseHTML(template)\r\n    // 2,生成render方法,render方法执行返回的结果就是虚拟dom\r\n    // render(){ 把树组装成这样\r\n    //     return _c('div', { id: 'app' },_c('div', { color: 'blue' }, _v(_s(name) + 'hello')\r\n    //         , _c('span', null, _v(_s(age) + 'hello'))))\r\n    // }\r\n    // console.log(ast)\r\n    // 生成代码 (模板引擎的实现原理就是 with + new Function)\r\n    let code = codegen(ast)\r\n    // console.log(this)\r\n    // with会从传进来的参数里取值,这里的this是调用者\r\n    code = `with(this){return ${code}}`\r\n    // console.log(code)\r\n    // 根据代码自动生成函数\r\n    let render = new Function(code)\r\n    // console.log(render.toString())\r\n    // function render(\r\n    // ) {\r\n    //     // 关闭严格模式才能用with\r\n    //     with (this) { return _c('div', { id: \"app\", style: { \"color\": \"skyblue\", \"background\": \" yellow\" }, show: true }, _c('div', null, _v(_s(age) + \"hello\" + _s(name) + \"world\")), _c('br', null, _v(\"world\"), _c('br', null, _c('span', null, _v(_s(age)))))) }\r\n    // }\r\n    // console.log(render.call(vm))\r\n    return render\r\n}\r\n\r\n// with (vm) {\r\n    // 传this,则vm的属性会给this\r\n    // name => this.name => vm.name => vm.data.name\r\n//     // 此时,name就是vm.name\r\n// log name\r\n// }","// 虚拟dom操作\r\n// _h() _c()\r\nconst isReservedTag = (tag) => { // 判断是不是html中已有的原始标签\r\n    return ['a', 'div', 'p', 'button', 'ul', 'li', 'span'].includes(tag)\r\n}\r\nexport function createElementVnode(vm, tag, data, ...children) {\r\n    // console.log(data)\r\n    if (data == null) {\r\n        data = {}\r\n    }\r\n    let key = data.key\r\n    if (key) delete data.key\r\n    // 如果是原始标签\r\n    console.log(isReservedTag(tag));\r\n    if (isReservedTag(tag)) {\r\n        // console.log(tag);\r\n        return vnode(vm, tag, key, data, children, null)\r\n    } else {\r\n        // 创造虚拟节点\r\n        let Ctor = vm.$options.components[tag] // 拿到组件的构造函数\r\n        console.log(Ctor);\r\n        return createComponentVnode(vm, tag, key, data, children, Ctor)\r\n    }\r\n}\r\n// 创建组件虚拟节点\r\nfunction createComponentVnode(vm, tag, key, data, children, Ctor) {\r\n    if (typeof Ctor === 'object') {\r\n        // 如果是对象\r\n        /* \r\n        let Sub = Vue.extend({\r\n            template: '<button>click<my-button></my-button></button>',\r\n            components: {\r\n                'my-button': {\r\n                    template: '<button>click-my-sub</button>'\r\n                }\r\n            }\r\n            // Vue解析组件的template来渲染\r\n        })\r\n        */\r\n        // 拿到构造函数\r\n        Ctor = vm.$options._base.extend(Ctor)\r\n    }\r\n    data.hook = {\r\n        init(vnode) {\r\n            // 组件创建真实节点时调用\r\n            // 保存组件的实例到虚拟节点上\r\n            let instance = vnode.componentInstance = new vnode.componentsOptions.Ctor\r\n            instance.$mount() // instance.$el\r\n        }\r\n    }\r\n    // console.log(Ctor);\r\n    // 创建vnode\r\n    return vnode(vm, tag, key, data, children, null, { Ctor })\r\n}\r\n// _v()\r\nexport function createTextVnode(vm, text) {\r\n    // console.log(text)\r\n    return vnode(vm, undefined, undefined, undefined, undefined, text)\r\n}\r\n// ast是语法转换,描述语法(html js css), <div xxx> -> div,xxx=true\r\n// 虚拟dom是描述dom元素,可以增加自定义属性 div.xxx\r\nfunction vnode(vm, tag, key, data, children, text, componentsOptions) {\r\n    return {\r\n        vm,\r\n        tag,\r\n        key,\r\n        data,\r\n        children,\r\n        text,\r\n        componentsOptions // 组件的构造函数\r\n        // ......\r\n    }\r\n}\r\n// 判断是不是同一个虚拟节点\r\nexport function isSameVnode(vnode1, vnode2) {\r\n    return vnode1.tag === vnode2.tag && vnode1.key === vnode2.key\r\n}\r\n","import { isSameVnode } from \".\"\r\nfunction createComponent(vnode) {\r\n    let data = vnode.data\r\n    // data变为init方法\r\n    data = data.hook\r\n    if (data) data = data.init\r\n    if (data) {\r\n        data(vnode) // 初始化组件\r\n    }\r\n    if (vnode.componentInstance) {\r\n        return true\r\n    }\r\n    return false\r\n}\r\nexport function createElm(vnode) {\r\n    // console.log(vnode);\r\n    if (!vnode) return\r\n    let { tag, data, children, text } = vnode\r\n    if (typeof tag === \"string\") { // 标签\r\n        // 区分是组件还是元素\r\n        if (createComponent(vnode)) {\r\n            // 组件\r\n            return vnode.componentInstance.$el\r\n        }\r\n        // 创建真实节点\r\n        // 将真实节点挂载到虚拟节点,后续修改就可以通过虚拟节点直接找到真实节点\r\n        vnode.el = document.createElement(tag)\r\n        patchProps(vnode.el, {}, data) // 更新属性 xxx=xxx\r\n        children.forEach(child => {\r\n            // debugger\r\n            // console.log(child)\r\n            if (!child) return\r\n            vnode.el.appendChild(createElm(child)) // 会将组件创建的元素插入到父元素\r\n        })\r\n    } else {\r\n        // console.log(vnode) 文本虚拟节点的tag是undefined\r\n        vnode.el = document.createTextNode(text)\r\n    }\r\n    // debugger\r\n    // console.log(vnode.el)\r\n    return vnode.el\r\n}\r\nexport function patchProps(el, oldProps = {}, props = {}) {\r\n    // 老的属性中有,新的没有,要删除老的\r\n    // style\r\n    let oldStyles = oldProps.style || {}\r\n    let newStyles = props.style || {}\r\n    for (let key in oldStyles) {\r\n        if (!newStyles[key]) {\r\n            el.style[key] = ''\r\n        }\r\n    }\r\n    // attributes\r\n    for (let key in oldProps) {\r\n        if (!props[key]) {\r\n            el.removeAttribute(key)\r\n        }\r\n    }\r\n    // 新的覆盖老的\r\n    for (let key in props) {\r\n        if (key === 'style') {\r\n            // 如果是style样式属性\r\n            for (let sytleName in props.style) {\r\n                el.style[sytleName] = props.style[sytleName]\r\n            }\r\n        } else {\r\n            el.setAttribute(key, props[key])\r\n        }\r\n    }\r\n}\r\nexport function patch(oldVNode, vnode) {\r\n    if (!oldVNode) {\r\n        // 组件挂载,没有传el\r\n        return createElm(vnode) // vm.$el 组件渲染的结果\r\n    }\r\n    // 初始化时是传一个真实dom,一个虚拟dom\r\n    const isRealElement = oldVNode.nodeType\r\n    // 初次渲染\r\n    if (isRealElement) {\r\n        const elm = oldVNode // 拿到真实元素\r\n        const parentElm = elm.parentNode // 拿到父元素\r\n        let newElm = createElm(vnode)\r\n        // console.log(newElm)\r\n        parentElm.insertBefore(newElm, elm.nextSibling) // 先插入到当前节点的后面(成为兄弟节点)\r\n        parentElm.removeChild(elm) // 删除老节点 \r\n        return newElm\r\n    } else {\r\n        // 更新时是传两个虚拟dom\r\n        // diff算法\r\n        // console.log(oldVNode, vnode);\r\n        // 1,两个节点不是同一个(key或标签tag不同),则直接更新\r\n        // 2,如果两个节点是同一个,则比较其属性是否有差异(复用老的,更新属性)\r\n        // 3,节点比较完毕,就比较儿子\r\n        // console.log(isSameVnode(oldVNode, vnode));\r\n        // 比较的方法\r\n        return patchVnode(oldVNode, vnode)\r\n    }\r\n}\r\nfunction patchVnode(oldVNode, vnode) {\r\n    // console.log(!isSameVnode(oldVNode, vnode));\r\n    if (!isSameVnode(oldVNode, vnode)) {\r\n        // 用老节点的父节点进行替换\r\n        let el = createElm(vnode)\r\n        oldVNode.el.parentNode.replaceChild(el, oldVNode.el)\r\n        return el\r\n    }\r\n    let el = vnode.el = oldVNode.el // 复用老节点的元素    \r\n    // 文本的情况,则比较文本内容\r\n    if (!oldVNode.tag) {\r\n        if (oldVNode.text !== vnode.text) {\r\n            el.textContent = vnode.text // 新的文本,覆盖老文本\r\n        }\r\n    } // 文本的tag是undefined\r\n    // 如果是标签,需要对比标签的属性\r\n    // console.log(1);\r\n    patchProps(el, oldVNode.data, vnode.data)\r\n    // 比较儿子节点 (1,双方都有children;2,只有一方有children)\r\n    let oldChildren = oldVNode.children || {}\r\n    let newChildren = vnode.children || {}\r\n    // console.log(oldChildren, newChildren);\r\n    if (oldChildren.length > 0 && newChildren.length > 0) {\r\n        // console.log(el);\r\n        // 完整diff,需要比较两个人的children\r\n        updateChildren(el, oldChildren, newChildren) // 更新两个人的children\r\n    } else if (newChildren.length > 0) {\r\n        // 没有老的,有新的\r\n        // 直接插入\r\n        mountChildren(el, newChildren)\r\n    } else if (oldChildren.length > 0) {\r\n        // 没有新的,老的有,要删除\r\n        // unmountChildren(el, oldChildren)\r\n        el.innerHTML = '' // 可以循环删除,这里只是图省事\r\n    }\r\n    return el\r\n}\r\nfunction mountChildren(el, newChildren) {\r\n    for (let i = 0; i < newChildren.length; i++) {\r\n        let child = newChildren[i]\r\n        el.appendChild(createElm(child))\r\n    }\r\n}\r\nfunction updateChildren(el, oldChildren, newChildren) {\r\n    // console.log(el, newChildren, oldChildren);\r\n    // 比较时,为了提高性能,需要优化(push,shift,pop,unshift,reserve,sort)\r\n    // vue2使用双指针的方式比较两个节点,(优化特殊情况: )只要头指针超过尾指针或者重合,就执行更新\r\n    let oldStartIndex = 0\r\n    let newStartIndex = 0\r\n    let oldEndIndex = oldChildren.length - 1\r\n    let newEndIndex = newChildren.length - 1\r\n    // console.log(oldEndIndex, newEndIndex);\r\n    let oldStartVnode = oldChildren[0]\r\n    let newStartVnode = newChildren[0]\r\n    let oldEndVnode = oldChildren[oldEndIndex]\r\n    let newEndVnode = newChildren[newEndIndex]\r\n    // 为了防止空格干扰,就在parse里去掉空格\r\n    // console.log(oldStartVnode, newStartVnode, oldEndVnode, newEndVnode);\r\n    // 特殊情况: 只要最后/或最前的几个节点不同\r\n    let lastEqIndex = 0 // 解决bug(insertBefore)\r\n    let lastEqVnode = null\r\n    // 根据老的列表做映射关系,用新的去找,找到就移动,找不到就添加,最后多余的删除\r\n    function makeIndexByKey(children) {\r\n        let map = {\r\n\r\n        }\r\n        children.forEach((child, index) => {\r\n            map[child.key] = index\r\n        })\r\n        return map\r\n    }\r\n    let map = makeIndexByKey(oldChildren)\r\n    console.log(map);\r\n    while (oldStartIndex <= oldEndIndex && newStartIndex <= newEndIndex) {\r\n        // 排除为undefined的情况\r\n        if (!oldStartVnode) {\r\n            oldStartVnode = oldChildren[++oldStartIndex]\r\n        } else if (!oldEndVnode) {\r\n            oldEndVnode = oldChildren[--oldEndIndex]\r\n        }\r\n        // 有一方 头指针 > 尾部指针,则停止循环\r\n        // 从头向后比较\r\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\r\n            // 递归比较\r\n            patchVnode(oldStartVnode, newStartVnode)\r\n            oldStartVnode = oldChildren[++oldStartIndex] // 向后移动\r\n            newStartVnode = newChildren[++newStartIndex]\r\n            // 比较开头节点\r\n            // console.log(oldStartIndex, oldEndIndex, newStartIndex, newEndIndex);\r\n        }\r\n        // 从尾向前比较\r\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\r\n            // 最后一次相同后--,则存入的是不相同的元素\r\n            lastEqVnode = oldChildren[lastEqIndex]\r\n            // console.log(lastEqIndex, lastEqVnode);\r\n            oldEndVnode = oldChildren[--oldEndIndex] // 向前移动\r\n            newEndVnode = newChildren[--newEndIndex]\r\n            lastEqIndex = oldEndIndex\r\n        }\r\n        // 交叉比较\r\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\r\n            // 老的尾 移到 老的头 (insertBefore有移动性,会把旧的移动走)\r\n            el.insertBefore(oldEndVnode.el, oldStartVnode.el)\r\n            // 老的被复用,所以要替换老的\r\n            patchVnode(oldEndVnode, newStartVnode)\r\n            oldEndVnode = oldChildren[--oldEndIndex]\r\n            newStartVnode = newChildren[++newStartIndex]\r\n        }\r\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\r\n            // 老的头 移到 老的新尾 (insertBefore有移动性,会把旧的移动走)\r\n            el.insertBefore(oldStartVnode.el, newEndVnode.el.nextSibling)\r\n            // 老的被复用,所以要替换老的\r\n            patchVnode(oldStartVnode, newEndVnode)\r\n            oldStartVnode = oldChildren[++oldStartIndex]\r\n            newEndVnode = newChildren[--newEndIndex]\r\n        } else {\r\n            // 乱序比对\r\n            // 如果没有key就直接替换(没办法比较)\r\n            let moveIndex = map[newStartVnode.key] // 如果拿到,则说明是要移动的索引\r\n            if (moveIndex !== undefined) {\r\n                let moveVnode = oldChildren[moveIndex] // 找的对应的虚拟节点,复用\r\n                el.insertBefore(moveVnode.el, oldStartVnode.el)\r\n                oldChildren[moveIndex] = undefined // 表示这个节点已经移动走了(如果是删除会报错)\r\n                patchVnode(moveVnode, newStartVnode) // 比较属性和子节点\r\n            } else {\r\n                // 找不到就创建新的,直接插入到oldStartVnode前 \r\n                el.insertBefore(createElm(newStartVnode), oldStartVnode.el)\r\n            }\r\n            newStartVnode = newChildren[++newStartIndex]\r\n        }\r\n    }\r\n    // console.log(newStartIndex, newEndIndex);\r\n    // 经过上面的比较后,指针都移到了双方最后一个相同的节点的位置,剩下的就是old或new独有的\r\n    // 新的多余的插入\r\n    if (newStartIndex <= newEndIndex) {\r\n        for (let i = newStartIndex; i <= newEndIndex; i++) {\r\n            let childEl = createElm(newChildren[i])\r\n            // 可能是向前或向后追加\r\n            // 根据后一位有无节点来判断是不是向后追加\r\n            // Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.\r\n            // let anchor = newChildren[newEndIndex + 1] ? newChildren[newEndIndex + 1].el : null // 获取下一个元素\r\n            let anchor = newChildren[newEndIndex + 1] ? lastEqVnode.el : null // 获取下一个元素\r\n            // el.appendChild(childEl) // 添加节点\r\n            // console.log(childEl, anchor);\r\n            el.insertBefore(childEl, anchor) // anchor为null,则认为是appendChild\r\n        }\r\n    }\r\n    // 旧的多余的删除\r\n    if (oldStartIndex <= oldEndIndex) {\r\n        for (let i = oldStartIndex; i <= oldEndIndex; i++) {\r\n            // 排除是undefined的情况,有值才删除\r\n            if (oldChildren[i]) {\r\n                let childEl = oldChildren[i].el\r\n                el.removeChild(childEl)\r\n            }\r\n        }\r\n    }\r\n}","import Watcher from \"./observe/watcher\"\r\nimport { createElementVnode, createTextVnode } from \"./vdom\"\r\nimport { patch, patchProps, createElm } from \"./vdom/patch\"\r\nexport function initLifeCycle(Vue) {\r\n    // 虚拟dom转真实dom\r\n    Vue.prototype._update = function (vnode) {\r\n        const vm = this\r\n        const el = vm.$el\r\n        // console.log('update', vnode)\r\n        // 判断是否是更新操作\r\n        const prevVnode = vm._vnode\r\n        // 把组件第一次产生的虚拟节点保存到vnode上\r\n        vm._vnode = vnode\r\n        if (prevVnode) {\r\n            // 之前渲染过了\r\n            // diff更新\r\n            patch(prevVnode, vnode)\r\n        } else {\r\n            // 初始化 \r\n            vm.$el = patch(el, vnode)\r\n        }\r\n    }\r\n    // _c{'div',{},...children}\r\n    Vue.prototype._c = function () {\r\n        // this -> vm\r\n        return createElementVnode(this, ...arguments)\r\n    }\r\n    // _v(text)\r\n    Vue.prototype._v = function () {\r\n        // console.log(...arguments)\r\n        // console.log(...arguments)\r\n        // console.log(createTextVnode(this, ...arguments))\r\n        return createTextVnode(this, ...arguments)\r\n    }\r\n    Vue.prototype._s = function (value) {\r\n        // console.log(value)\r\n        // 插值表达式里的值(zs)如果不是对象,就直接返回 \r\n        if (typeof value !== 'object') return value\r\n        // 如果是对象,就转字符串    \r\n        return JSON.stringify(value)\r\n    }\r\n    // 渲染虚拟dom\r\n    Vue.prototype._render = function () {\r\n        // console.log('render')\r\n        // const vm = this \r\n        // 让with里的this指向vm\r\n        // 此时可以视图和属性进行绑定\r\n        return this.$options.render.call(this) // ast语法转义后生成的render\r\n    }\r\n}\r\n// 组件挂载\r\nexport function mountComponent(vm, el) {\r\n    // 把要被挂载的真实dom,放到vm实例上\r\n    vm.$el = el // 这个el是querySelector获取了的\r\n    // 1,调用render方法产生虚拟节点,虚拟dom\r\n    // 2,根据虚拟dom生成真实dom \r\n    // 3,插入el元素\r\n    // 创建watcher\r\n    const updateComponent = () => {\r\n        vm._update(vm._render())\r\n    }\r\n    // debugger\r\n    new Watcher(vm, updateComponent, true) // true用于标识这是一个渲染watcher\r\n    // console.log(watcher)\r\n    // 改为在Watcher创建时调用,进行初次渲染\r\n    // vm._update(vm._render()) // vm.$options.render 返回虚拟节点\r\n}\r\n// vue核心流程: 1,创建响应式数据 2,模板转化为ast语法树\r\n    // 3,将ast转换为render函数 4,后续每次更新可以只执行render函数(无需再次执行ast转换)\r\n    // render函数会产生虚拟节点(使用响应式数据)\r\n    // 根据生成的虚拟dom创造真实dom","import { initState } from \"./state\"\r\nimport { compileToFunction } from \"./compile\"\r\nimport { mountComponent } from \"./lifecycle\"\r\nimport {  mergeOptions } from \"./utils\"\r\n// 提供给vue来使用(此时全局还没有vue对象,所以没办法直接挂载)\r\nexport function initMixin(Vue) {\r\n    // 初始化操作\r\n    Vue.prototype._init = function (options) {\r\n        // debugger\r\n        // 将用户传入的options挂载到vue对象上\r\n        const vm = this // 原型中的this表示实例\r\n        // vm.$options = options // $xxx 表示是vue的属性(在(vue里,如果data里的变量名是$开头,vue是拿不到的)\r\n        vm.$options = mergeOptions(this.constructor.options, options) // $xxx 表示是vue的属性(在(vue里,如果data里的变量名是$开头,vue是拿不到的)\r\n        // 初始化状态\r\n        // console.log(vm.$options)\r\n        initState(vm)\r\n        // callHook(vm, 'created')     \r\n        if (options.el) {\r\n            vm.$mount(options.el)\r\n        }\r\n    }\r\n    // 渲染模板的操作\r\n    Vue.prototype.$mount = function (el) {\r\n        // console.log(el)\r\n        const vm = this\r\n        // 获取el对应的dom\r\n        el = document.querySelector(el)\r\n        // console.log(el);\r\n        let ops = vm.$options\r\n        if (!ops.render) { // 先看有没有render函数\r\n            let template // 没有render就看看有没有template\r\n            // 如果用户没有使用了render函数\r\n            if (!ops.template && el) { // 没有写模板,但是写了el\r\n                /*\r\n                    1）innerHTML:\r\n                    从对象的起始位置到终止位置的全部内容,不包括Html标签。\r\n                    2）outerHTML:\r\n                    除了包含innerHTML的全部内容外, 还包含对象标签本身。\r\n                */\r\n                template = el.outerHTML  // outerHTML在火狐下可能不兼容\r\n            } else {\r\n                // if (el) {\r\n                    // console.log(el) \r\n                    // 写了template,就用用户的template\r\n                    template = ops.template\r\n                // }\r\n            }\r\n            // console.log(template)\r\n            if (template) {\r\n                // 对模板进行编译\r\n                const render = compileToFunction(template)\r\n                ops.render = render\r\n            }\r\n        }\r\n        // console.log(ops.render)// 最终获取render方法\r\n        // 组件挂载\r\n        mountComponent(vm, el)\r\n        // script标签引用的vue.global.js,这个过程是在浏览器运行的\r\n        // runtime是不包含模板编译的,整个编译是打包时通过loader来转义vue文件的,用runtime时不能使用template\r\n    }\r\n}\r\n\r\n","import { initGlobalAPI } from \"./globalApi\"\r\nimport { initMixin } from \"./init\"\r\nimport { initLifeCycle } from \"./lifecycle\" \r\nimport { initStateMixin } from \"./state\" \r\n// class会把所有方法耦合在一起\r\nfunction Vue(options) { // options就是用户提供的选项 \r\n    this._init(options) // 初始化 \r\n    // if (options.el) this.$mount(options.el) // 挂载\r\n}\r\n// debugger\r\ninitMixin(Vue)\r\ninitLifeCycle(Vue) // 组件渲染\r\ninitGlobalAPI(Vue)\r\ninitStateMixin(Vue)\r\n// test\r\n/*\r\n// let render1 = compileToFunction(`<li key=\"b\" b='1' style=\"color: red\">{{name}}</li>`)\r\n// let render1 = compileToFunction(`<li key=\"b\" b='1' style=\"color: red\"></li>`)\r\n// let render1 = compileToFunction(`<ul style=\"color: red\">\r\n//     <li key=\"a\">a</li>\r\n//     <li key=\"b\">b</li>\r\n//     <li key=\"c\">c</li>\r\n// </ul>`)\r\n// let render1 = compileToFunction(`<ul style=\"color: red\">\r\n//     <li key=\"a\">a</li>\r\n//     <li key=\"b\">b</li>\r\n//     <li key=\"c\">c</li>\r\n//     <li key=\"d\">d</li>\r\n// </ul>`)\r\nlet render1 = compileToFunction(`<ul style=\"color: red\">\r\n    <li key=\"a\">a</li>\r\n    <li key=\"b\">b</li>\r\n    <li key=\"c\">c</li>  \r\n    <li key=\"d\">d</li>\r\n</ul>`)\r\nlet vm1 = new Vue({ data: { name: \"zf\" } })\r\nlet prevVnode = render1.call(vm1)\r\n// console.log(prevVnode);\r\nlet el = createElm(prevVnode)\r\ndocument.body.appendChild(el)\r\n// let render2 = compileToFunction(`<span key=\"a\" style=\"color: red;background: blue\">{{name}}</span>`)\r\n// let render2 = compileToFunction(`<li key=\"a\" style=\"color: red;background: blue\">{{name}}</li>`)\r\n// let render2 = compileToFunction(`<li key=\"b\" a='1' style=\"color: red;background: blue\">{{name}}</li>`)\r\n// let render2 = compileToFunction(`<li key=\"b\" a='1' style=\"color: red;background: blue\"></li>`)\r\n// let render2 = compileToFunction(`<li key=\"b\" a='1' style=\"color: red;background: blue\"><div>1<span>2</span></div>{{name}}</li>`)\r\n// let render2 = compileToFunction(`<ul style=\"color: red;background: blue\">\r\n//     <li key=\"a\">a</li>\r\n//     <li key=\"b\">b</li>\r\n//     <li key=\"c\">c</li>\r\n//     <li key=\"d\">d</li>\r\n// </ul>`)\r\n// let render2 = compileToFunction(`<ul style=\"color: red;background: blue\">\r\n//     <li key=\"a\">a</li>\r\n//     <li key=\"b\">b</li>\r\n//     <li key=\"c\">c</li> \r\n// </ul>`)\r\n// let render2 = compileToFunction(`<ul style=\"color: red;background: blue\">\r\n//     <li key=\"d\">d</li>\r\n//     <li key=\"a\">a</li>\r\n//     <li key=\"b\">b</li>\r\n//     <li key=\"c\">c</li> \r\n// </ul>`)\r\n// let render2 = compileToFunction(`<ul style=\"color: red;background: blue\">\r\n//     <li key=\"d\">d</li>\r\n//     <li key=\"c\">c</li> \r\n//     <li key=\"b\">b</li>\r\n//     <li key=\"a\">a</li>\r\n// </ul>`)\r\nlet render2 = compileToFunction(`<ul style=\"color: red;background: blue\">  \r\n    <li key=\"b\">b</li>\r\n    <li key=\"m\">m</li>\r\n    <li key=\"a\">a</li>\r\n    <li key=\"p\">p</li>   \r\n    <li key=\"c\">c</li>  \r\n    <li key=\"q\">q</li>\r\n</ul>`)\r\nlet vm2 = new Vue({ data: { name: \"zf\" } })\r\nlet nextVnode = render2.call(vm2)\r\n// console.log(nextVnode);\r\nlet newEl = createElm(nextVnode)\r\n// 暴力替换, 如果用户一直创建并操作dom, 会很耗性能\r\n// diff算法平级进行比较,如果相同就不修改\r\nsetTimeout(() => {\r\n    // el.parentNode.replaceChild(newEl, el)\r\n    patch(prevVnode, nextVnode)\r\n}, 1000); */\r\nexport default Vue"],"names":["strats","LIFECYCLE","forEach","hook","p","c","concat","components","parentValue","childValue","res","Object","create","key","mergeOptions","options","margeField","hasOwnProperty","initGlobalAPI","Vue","_base","mixin","extend","Sub","_init","prototype","constructor","component","id","definition","Dep","subs","target","addDep","watcher","push","update","stack","pushTarget","popTarget","pop","length","oldArrayProto","Array","newArrayProto","methods","method","args","result","call","inserted","ob","__ob__","slice","observeArray","dep","notify","Observer","data","defineProperty","value","enumerable","isArray","__proto__","walk","keys","defineReactive","item","observe","dependArray","i","current","depend","childOb","get","set","newValue","Watcher","vm","exprOrFn","cb","renderWatcher","getter","deps","depIds","Set","lazy","dirty","undefined","user","has","add","addSub","queryWatcher","oldValue","newVal","queue","pending","flushSchedulerQueue","flushQueue","q","run","setTimeout","callbacks","waiting","flushCallbacks","cbs","nextTick","initState","opts","$options","initData","computed","initComputed","watch","initWatch","proxy","_data","watchers","_computedWatchers","userDef","fn","defineComputed","setter","createComputedGetter","evaluate","handler","createWatcher","$watch","initStateMixin","$nextTick","initMixin","ncname","qnameCapture","startTagOpen","RegExp","endTag","attribute","startTagClose","parseHTML","html","ELEMENT_TYPE","TEXT_TYPE","currentParent","root","createASTElement","tag","attrs","type","children","parent","start","node","chars","text","replace","end","advance","n","substring","parseStartTag","match","tagName","attr","name","textEnd","indexOf","startTagMatch","endTagMatch","defaultTagRE","gen","codegen","test","JSON","stringify","tokens","lastIndex","exec","index","trim","join","genChildren","map","child","genProps","str","obj","split","ast","code","compileToFunction","template","render","Function","isReservedTag","includes","createElementVnode","console","log","vnode","Ctor","createComponentVnode","init","instance","componentInstance","componentsOptions","$mount","createTextVnode","isSameVnode","vnode1","vnode2","createComponent","createElm","$el","el","document","createElement","patchProps","appendChild","createTextNode","oldProps","props","oldStyles","style","newStyles","removeAttribute","sytleName","setAttribute","patch","oldVNode","isRealElement","nodeType","elm","parentElm","parentNode","newElm","insertBefore","nextSibling","removeChild","patchVnode","replaceChild","textContent","oldChildren","newChildren","updateChildren","mountChildren","innerHTML","oldStartIndex","newStartIndex","oldEndIndex","newEndIndex","oldStartVnode","newStartVnode","oldEndVnode","newEndVnode","lastEqIndex","lastEqVnode","makeIndexByKey","moveIndex","moveVnode","childEl","anchor","initLifeCycle","_update","prevVnode","_vnode","_c","arguments","_v","_s","_render","mountComponent","updateComponent","querySelector","ops","outerHTML"],"mappings":";;;;;IAAA,IAAMA,MAAM,GAAG,EAAE,CAAA;IACjB,IAAMC,SAAS,GAAG,CACd,cAAc,EACd,QAAQ,CACX,CAAA;IACDA,SAAS,CAACC,OAAO,CAAC,UAAAC,IAAI,EAAI;MACtBH,MAAM,CAACG,IAAI,CAAC,GAAG,UAAUC,CAAC,EAAEC,CAAC,EAAE;IAC3B,IAAA,IAAIA,CAAC,EAAE;IACH;IACA,MAAA,IAAID,CAAC,EAAE;IACH,QAAA,OAAOA,CAAC,CAACE,MAAM,CAACD,CAAC,CAAC,CAAA;IACtB,OAAC,MAAM;YACH,OAAO,CAACA,CAAC,CAAC,CAAC;IACf,OAAA;IACJ,KAAC,MAAM;IACH,MAAA,OAAOD,CAAC,CAAC;IACb,KAAA;OACH,CAAA;IACL,CAAC,CAAC,CAAA;IACF;IACAJ,MAAM,CAACO,UAAU,GAAG,UAAUC,WAAW,EAAEC,UAAU,EAAE;IACnD,EAAA,IAAMC,GAAG,GAAGC,MAAM,CAACC,MAAM,CAACJ,WAAW,CAAC,CAAA;IACtC,EAAA,IAAIC,UAAU,EAAE;IACZ,IAAA,KAAK,IAAII,GAAG,IAAIJ,UAAU,EAAE;IACxB;IACAC,MAAAA,GAAG,CAACG,GAAG,CAAC,GAAGJ,UAAU,CAACI,GAAG,CAAC,CAAA;IAC9B,KAAA;IACJ,GAAA;IACA,EAAA,OAAOH,GAAG,CAAA;IACd,CAAC,CAAA;IACM,SAASI,YAAY,CAACV,CAAC,EAAEC,CAAC,EAAE;MAC/B,IAAMU,OAAO,GAAG,EAAE,CAAA;IAClB,EAAA,KAAK,IAAIF,GAAG,IAAIT,CAAC,EAAE;IACf;QACAY,UAAU,CAACH,GAAG,CAAC,CAAA;IACnB,GAAA;IACA,EAAA,KAAK,IAAIA,IAAG,IAAIR,CAAC,EAAE;IACf,IAAA,IAAI,CAACD,CAAC,CAACa,cAAc,CAACJ,IAAG,CAAC,EAAE;UACxBG,UAAU,CAACH,IAAG,CAAC,CAAA;IACnB,KAAA;IACJ,GAAA;MACA,SAASG,UAAU,CAACH,GAAG,EAAE;IACrB;IACA,IAAA,IAAIb,MAAM,CAACa,GAAG,CAAC,EAAE;IACbE,MAAAA,OAAO,CAACF,GAAG,CAAC,GAAGb,MAAM,CAACa,GAAG,CAAC,CAACT,CAAC,CAACS,GAAG,CAAC,EAAER,CAAC,CAACQ,GAAG,CAAC,CAAC,CAAA;IAC9C,KAAC,MAAM;IACH;IACAE,MAAAA,OAAO,CAACF,GAAG,CAAC,GAAGR,CAAC,CAACQ,GAAG,CAAC,IAAIT,CAAC,CAACS,GAAG,CAAC,CAAA;IACnC,KAAA;IACJ,GAAA;IACA,EAAA,OAAOE,OAAO,CAAA;IAClB;;ICjDO,SAASG,aAAa,CAACC,GAAG,EAAE;MAC/BA,GAAG,CAACJ,OAAO,GAAG;IACV;IACAK,IAAAA,KAAK,EAAED,GAAAA;OACV,CAAA;IACDA,EAAAA,GAAG,CAACE,KAAK,GAAG,UAAUA,KAAK,EAAE;QACzB,IAAI,CAACN,OAAO,GAAGD,YAAY,CAAC,IAAI,CAACC,OAAO,EAAEM,KAAK,CAAC,CAAA;IAChD,IAAA,OAAO,IAAI,CAAA;OACd,CAAA;IACD;IACAF,EAAAA,GAAG,CAACG,MAAM,GAAG,UAAUP,OAAO,EAAE;IAC5B;IACA,IAAA,SAASQ,GAAG,GAAe;UAAA,IAAdR,OAAO,GAAG,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,EAAE,CAAA;IAAI;IACzB;IACA;IACA,MAAA,IAAI,CAACS,KAAK,CAACT,OAAO,CAAC,CAAC;IACpB;IACJ,KAAA;IACA;QACAQ,GAAG,CAACE,SAAS,GAAGd,MAAM,CAACC,MAAM,CAACO,GAAG,CAACM,SAAS,CAAC,CAAC;IAC7C;IACAF,IAAAA,GAAG,CAACE,SAAS,CAACC,WAAW,GAAGH,GAAG,CAAA;IAC/B;IACA;QACAA,GAAG,CAACR,OAAO,GAAGD,YAAY,CAACK,GAAG,CAACJ,OAAO,EAAEA,OAAO,CAAC,CAAC;IACjD,IAAA,OAAOQ,GAAG,CAAA;OACb,CAAA;IACD;IACAJ,EAAAA,GAAG,CAACJ,OAAO,CAACR,UAAU,GAAG,EAAE,CAAA;IAC3BY,EAAAA,GAAG,CAACQ,SAAS,GAAG,UAAUC,EAAE,EAAEC,UAAU,EAAE;IACtC;IACAA,IAAAA,UAAU,GACN,OAAOA,UAAU,KAAK,UAAU,GAAGA,UAAU,GAAGV,GAAG,CAACG,MAAM,CAACO,UAAU,CAAC,CAAA;QAC1EV,GAAG,CAACJ,OAAO,CAACR,UAAU,CAACqB,EAAE,CAAC,GAAGC,UAAU,CAAA;IACvC;OACH,CAAA;IACL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICtCA,IAAID,IAAE,GAAG,CAAC,CAAC;IAAA,IACLE,GAAG,gBAAA,YAAA;MACL,SAAc,GAAA,GAAA;IAAA,IAAA,eAAA,CAAA,IAAA,EAAA,GAAA,CAAA,CAAA;IACV,IAAA,IAAI,CAACF,EAAE,GAAGA,IAAE,EAAE,CAAA;IACd,IAAA,IAAI,CAACG,IAAI,GAAG,EAAE,CAAC;IACnB,GAAA;IAAC,EAAA,YAAA,CAAA,GAAA,EAAA,CAAA;IAAA,IAAA,GAAA,EAAA,QAAA;IAAA,IAAA,KAAA,EACD,SAAS,MAAA,GAAA;IACL;IACA;IACA;IACAD,MAAAA,GAAG,CAACE,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC5B,KAAA;IAAC,GAAA,EAAA;IAAA,IAAA,GAAA,EAAA,QAAA;QAAA,KACD,EAAA,SAAA,MAAA,CAAOC,OAAO,EAAE;IACZ;IACA,MAAA,IAAI,CAACH,IAAI,CAACI,IAAI,CAACD,OAAO,CAAC,CAAA;IAC3B,KAAA;IACA;IAAA,GAAA,EAAA;IAAA,IAAA,GAAA,EAAA,QAAA;IAAA,IAAA,KAAA,EACA,SAAS,MAAA,GAAA;IACL;IACA,MAAA,IAAI,CAACH,IAAI,CAAC7B,OAAO,CAAC,UAAAgC,OAAO,EAAA;YAAA,OAAIA,OAAO,CAACE,MAAM,EAAE,CAAA;WAAC,CAAA,CAAA;IAClD,KAAA;IAAC,GAAA,CAAA,CAAA,CAAA;IAAA,EAAA,OAAA,GAAA,CAAA;IAAA,CAAA,EAAA,CAAA;IAELN,GAAG,CAACE,MAAM,GAAG,IAAI,CAAA;IACjB;IACA;IACA;IACA,IAAIK,KAAK,GAAG,EAAE,CAAA;IACd;IACO,SAASC,UAAU,CAACJ,OAAO,EAAE;IAChCG,EAAAA,KAAK,CAACF,IAAI,CAACD,OAAO,CAAC,CAAA;MACnBJ,GAAG,CAACE,MAAM,GAAGE,OAAO,CAAA;IACpB;IACJ,CAAA;IACA;IACO,SAASK,SAAS,GAAG;MACxBF,KAAK,CAACG,GAAG,EAAE,CAAA;MACXV,GAAG,CAACE,MAAM,GAAGK,KAAK,CAACA,KAAK,CAACI,MAAM,GAAG,CAAC,CAAC,CAAA;IACxC;;ICrCA;IACA,IAAIC,aAAa,GAAGC,KAAK,CAAClB,SAAS,CAAC;IACpC;IACO,IAAImB,aAAa,GAAGjC,MAAM,CAACC,MAAM,CAAC8B,aAAa,CAAC,CAAA;IACvD;IACA,IAAIG,OAAO,GAAG;IAAE;IACZ;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAM,EAAE,KAAK,EACb,OAAO,EAAE,SAAS,EAClB,SAAS,EACT,MAAM,EACN,QAAQ,CACX,CAAA;IACDA,OAAO,CAAC3C,OAAO,CAAC,UAAA4C,MAAM,EAAI;IACtB;IACA;IACAF,EAAAA,aAAa,CAACE,MAAM,CAAC,GAAG,YAAmB;IAAA,IAAA,IAAA,qBAAA,CAAA;IAAA,IAAA,KAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAANC,IAAI,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;UAAJA,IAAI,CAAA,IAAA,CAAA,GAAA,SAAA,CAAA,IAAA,CAAA,CAAA;IAAA,KAAA;IACrC;IACA;IACA,IAAA,IAAMC,MAAM,GAAG,CAAAN,qBAAAA,GAAAA,aAAa,CAACI,MAAM,CAAC,EAACG,IAAI,CAAC,KAAA,CAAA,qBAAA,EAAA,CAAA,IAAI,CAAKF,CAAAA,MAAAA,CAAAA,IAAI,EAAC,CAAC;IACzD;IACA,IAAA,IAAIG,QAAQ,CAAC;IACb,IAAA,IAAIC,EAAE,GAAG,IAAI,CAACC,MAAM,CAAC;IACrB,IAAA,QAAQN,MAAM;IACV,MAAA,KAAK,SAAS,CAAA;IACd,MAAA,KAAK,MAAM;IACPI,QAAAA,QAAQ,GAAGH,IAAI,CAAA;IACf,QAAA,MAAA;IACJ,MAAA,KAAK,QAAQ;IAAE;IACX;IACAG,QAAAA,QAAQ,GAAGH,IAAI,CAACM,KAAK,CAAC,CAAC,CAAC,CAAC;IACzB,QAAA,MAAA;IAEK,KAAA;IAEb;IACA,IAAA,IAAIH,QAAQ,EAAE;IACV;IACA;IACA,MAAA,IAAI,CAACE,MAAM,CAACE,YAAY,CAACJ,QAAQ,CAAC,CAAA;IACtC,KAAA;IACA;IACAC,IAAAA,EAAE,CAACI,GAAG,CAACC,MAAM,EAAE,CAAA;IACf,IAAA,OAAOR,MAAM,CAAA;OAChB,CAAA;IACL,CAAC,CAAC;;ICjDF;IAAA,IACMS,QAAQ,gBAAA,YAAA;IACV,EAAA,SAAA,QAAA,CAAYC,IAAI,EAAE;IAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,CAAA,CAAA;IACd;IACA;IACA,IAAA,IAAI,CAACH,GAAG,GAAG,IAAIzB,GAAG,EAAE,CAAA;IAEpBnB,IAAAA,MAAM,CAACgD,cAAc,CAACD,IAAI,EAAE,QAAQ,EAAE;IAClCE,MAAAA,KAAK,EAAE,IAAI;IACX;UACAC,UAAU,EAAE,KAAK;IACrB,KAAC,CAAC,CAAA;IACF;IACA;IACA;IACA,IAAA,IAAIlB,KAAK,CAACmB,OAAO,CAACJ,IAAI,CAAC,EAAE;IACrB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;UACAA,IAAI,CAACK,SAAS,GAAGnB,aAAa,CAAA;IAC9B,MAAA,IAAI,CAACU,YAAY,CAACI,IAAI,CAAC,CAAA;IACvB,MAAA,OAAA;IACJ,KAAA;IACA;IACA,IAAA,IAAI,CAACM,IAAI,CAACN,IAAI,CAAC,CAAA;IACnB,GAAA;IAAC,EAAA,YAAA,CAAA,QAAA,EAAA,CAAA;IAAA,IAAA,GAAA,EAAA,MAAA;QAAA,KACD,EAAA,SAAA,IAAA,CAAKA,IAAI,EAAE;IAAE;IACT;UACA/C,MAAM,CAACsD,IAAI,CAACP,IAAI,CAAC,CAACxD,OAAO,CAAC,UAAAW,GAAG,EAAA;YAAA,OAAIqD,cAAc,CAACR,IAAI,EAAE7C,GAAG,EAAE6C,IAAI,CAAC7C,GAAG,CAAC,CAAC,CAAA;WAAC,CAAA,CAAA;IAC1E,KAAA;IACA;IAAA,GAAA,EAAA;IAAA,IAAA,GAAA,EAAA,cAAA;QAAA,KACA,EAAA,SAAA,YAAA,CAAa6C,IAAI,EAAE;IACfA,MAAAA,IAAI,CAACxD,OAAO,CAAC,UAAAiE,IAAI,EAAA;YAAA,OAAIC,OAAO,CAACD,IAAI,CAAC,CAAA;WAAC,CAAA,CAAA;IACvC,KAAA;IAAC,GAAA,CAAA,CAAA,CAAA;IAAA,EAAA,OAAA,QAAA,CAAA;IAAA,CAAA,EAAA,CAAA;IAEL,SAASE,WAAW,CAACT,KAAK,EAAE;IACxB,EAAA,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,KAAK,CAACnB,MAAM,EAAE6B,CAAC,EAAE,EAAE;IACnC,IAAA,IAAIC,OAAO,GAAGX,KAAK,CAACU,CAAC,CAAC,CAAA;QACtBC,OAAO,CAACnB,MAAM,IAAImB,OAAO,CAACnB,MAAM,CAACG,GAAG,CAACiB,MAAM,EAAE,CAAA;IAC7C;IACA,IAAA,IAAI7B,KAAK,CAACmB,OAAO,CAACS,OAAO,CAAC,EAAE;UACxBF,WAAW,CAACE,OAAO,CAAC,CAAA;IACxB,KAAA;IACJ,GAAA;IACJ,CAAA;IACA;IACO,SAASL,cAAc,CAAClC,MAAM,EAAEnB,GAAG,EAAE+C,KAAK,EAAE;IAAE;IACjD;IACA,EAAA,IAAIa,OAAO,GAAGL,OAAO,CAACR,KAAK,CAAC,CAAC;IAC7B;IACA,EAAA,IAAIL,GAAG,GAAG,IAAIzB,GAAG,EAAE,CAAC;IACpBnB,EAAAA,MAAM,CAACgD,cAAc,CAAC3B,MAAM,EAAEnB,GAAG,EAAE;IAC/B;IACA;IACA6D,IAAAA,GAAG,EAAG,SAAA,GAAA,GAAA;IACF;UACA,IAAI5C,GAAG,CAACE,MAAM,EAAE;IACZ;YACAuB,GAAG,CAACiB,MAAM,EAAE,CAAC;IACb,QAAA,IAAIC,OAAO,EAAE;IAAE;IACXA,UAAAA,OAAO,CAAClB,GAAG,CAACiB,MAAM,EAAE,CAAC;IACrB,UAAA,IAAI7B,KAAK,CAACmB,OAAO,CAACF,KAAK,CAAC,EAAE;IAAE;IACxB;gBACAS,WAAW,CAACT,KAAK,CAAC,CAAA;IACtB,WAAA;IACJ,SAAA;IACJ,OAAA;IACA,MAAA,OAAOA,KAAK,CAAA;SACf;IACD;QACAe,GAAG,EAAA,SAAA,GAAA,CAACC,QAAQ,EAAE;UACV,IAAIA,QAAQ,KAAKhB,KAAK,EAAE,OAAA;UACxBQ,OAAO,CAACQ,QAAQ,CAAC,CAAC;IAClBhB,MAAAA,KAAK,GAAGgB,QAAQ,CAAA;UAChBrB,GAAG,CAACC,MAAM,EAAE,CAAE;IAClB,KAAA;IACJ,GAAC,CAAC,CAAA;IACN,CAAA;;IACO,SAASY,OAAO,CAACV,IAAI,EAAE;IAC1B;IACA;IACA;MACA,IAAI,OAAA,CAAOA,IAAI,CAAK,KAAA,QAAQ,IAAIA,IAAI,IAAI,IAAI,EAAE;IAC1C,IAAA,OAAM;IACV,GAAA;;IACA,EAAA,IAAIA,IAAI,CAACN,MAAM,YAAYK,QAAQ,EAAE;IACjC;QACA,OAAOC,IAAI,CAACN,MAAM,CAAA;IACtB,GAAA;IACA;IACA;IACA,EAAA,OAAO,IAAIK,QAAQ,CAACC,IAAI,CAAC,CAAA;IAC7B;;IClGA,IAAI9B,EAAE,GAAG,CAAC,CAAC;IACX;IACA;IAAA,IACMiD,OAAO,gBAAA,YAAA;IAAG;IACZ;IACA,EAAA,SAAA,OAAA,CAAYC,EAAE,EAAEC,QAAQ,EAAEhE,OAAO,EAAEiE,EAAE,EAAE;IAAA,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,CAAA,CAAA;IACnC;IACA,IAAA,IAAI,CAACpD,EAAE,GAAGA,EAAE,EAAE,CAAA;IACd,IAAA,IAAI,CAACqD,aAAa,GAAGlE,OAAO,CAAC;IAC7B,IAAA,IAAI,CAACiE,EAAE,GAAGA,EAAE,CAAC;IACb,IAAA,IAAI,OAAOD,QAAQ,IAAI,QAAQ,EAAE;IAC7B;UACA,IAAI,CAACG,MAAM,GAAG,YAAY;IACtB,QAAA,OAAOJ,EAAE,CAACC,QAAQ,CAAC,CAAC;WACvB,CAAA;IACL,KAAC,MAAM;IACH,MAAA,IAAI,CAACG,MAAM,GAAGH,QAAQ,CAAC;IAC3B,KAAA;;IACA,IAAA,IAAI,CAACI,IAAI,GAAG,EAAE,CAAC;IACf,IAAA,IAAI,CAACC,MAAM,GAAG,IAAIC,GAAG,EAAE,CAAC;IACxB,IAAA,IAAI,CAACC,IAAI,GAAGvE,OAAO,CAACuE,IAAI,CAAC;IACzB,IAAA,IAAI,CAACC,KAAK,GAAG,IAAI,CAACD,IAAI,CAAC;QACvB,IAAI,CAACR,EAAE,GAAGA,EAAE,CAAA;IACZ;IACA,IAAA,IAAI,CAAClB,KAAK,GAAG,IAAI,CAAC0B,IAAI,GAAGE,SAAS,GAAG,IAAI,CAACd,GAAG,EAAE,CAAC;IAChD,IAAA,IAAI,CAACe,IAAI,GAAG1E,OAAO,CAAC0E,IAAI,CAAA;IAC5B,GAAA;IAAC,EAAA,YAAA,CAAA,OAAA,EAAA,CAAA;IAAA,IAAA,GAAA,EAAA,QAAA;QAAA,KACD,EAAA,SAAA,MAAA,CAAOlC,GAAG,EAAE;IAAE;IACV,MAAA,IAAI3B,EAAE,GAAG2B,GAAG,CAAC3B,EAAE,CAAA;UACf,IAAI,CAAC,IAAI,CAACwD,MAAM,CAACM,GAAG,CAAC9D,EAAE,CAAC,EAAE;IACtB;IACA,QAAA,IAAI,CAACuD,IAAI,CAAChD,IAAI,CAACoB,GAAG,CAAC,CAAA;IACnB,QAAA,IAAI,CAAC6B,MAAM,CAACO,GAAG,CAAC/D,EAAE,CAAC,CAAA;IACnB;IACA2B,QAAAA,GAAG,CAACqC,MAAM,CAAC,IAAI,CAAC,CAAA;IACpB,OAAA;IACJ,KAAA;IAAC,GAAA,EAAA;IAAA,IAAA,GAAA,EAAA,UAAA;IAAA,IAAA,KAAA,EACD,SAAW,QAAA,GAAA;IACP;IACA;IACA,MAAA,IAAI,CAAChC,KAAK,GAAG,IAAI,CAACc,GAAG,EAAE,CAAC;IACxB,MAAA,IAAI,CAACa,KAAK,GAAG,KAAK,CAAC;IACvB,KAAA;IACA;IAAA,GAAA,EAAA;IAAA,IAAA,GAAA,EAAA,KAAA;IAAA,IAAA,KAAA,EACA,SAAM,GAAA,GAAA;UACFjD,UAAU,CAAC,IAAI,CAAC,CAAA;IAChB;IACA,MAAA,IAAIsB,KAAK,GAAG,IAAI,CAACsB,MAAM,CAACjC,IAAI,CAAC,IAAI,CAAC6B,EAAE,CAAC,CAAC;IACtC;IACA;IACAvC,MAAAA,SAAS,EAAE,CAAA;IACX;IACA,MAAA,OAAOqB,KAAK,CAAC;IACjB,KAAA;IAAC,GAAA,EAAA;IAAA,IAAA,GAAA,EAAA,QAAA;IAAA,IAAA,KAAA,EACD,SAAS,MAAA,GAAA;IACL,MAAA,IAAIU,CAAC,GAAG,IAAI,CAACa,IAAI,CAAC1C,MAAM,CAAA;UACxB,OAAO6B,CAAC,EAAE,EAAE;IACR;IACA;YACA,IAAI,CAACa,IAAI,CAACb,CAAC,CAAC,CAACE,MAAM,EAAE,CAAC;IAC1B,OAAA;IACJ,KAAA;IAAC,GAAA,EAAA;IAAA,IAAA,GAAA,EAAA,QAAA;IAAA,IAAA,KAAA,EACD,SAAS,MAAA,GAAA;UACL,IAAI,IAAI,CAACc,IAAI,EAAE;IACX;IACA,QAAA,IAAI,CAACC,KAAK,GAAG,IAAI,CAAC;IAClB;IACA,QAAA,OAAA;IACJ,OAAA;IACA;UACAM,YAAY,CAAC,IAAI,CAAC,CAAC;IACnB;IACJ,KAAA;IAAC,GAAA,EAAA;IAAA,IAAA,GAAA,EAAA,KAAA;IAAA,IAAA,KAAA,EACD,SAAM,GAAA,GAAA;IACF,MAAA,IAAIC,QAAQ,GAAG,IAAI,CAAClC,KAAK,CAAA;IACzB;IACA,MAAA,IAAImC,MAAM,GAAG,IAAI,CAACrB,GAAG,EAAE,CAAA;UACvB,IAAI,IAAI,CAACe,IAAI,EAAE;IACX;IACA,QAAA,IAAI,CAACT,EAAE,CAAC/B,IAAI,CAAC,IAAI,CAAC6B,EAAE,EAAEiB,MAAM,EAAED,QAAQ,CAAC,CAAA;IAC3C,OAAA;IACJ,KAAA;IAAC,GAAA,CAAA,CAAA,CAAA;IAAA,EAAA,OAAA,OAAA,CAAA;IAAA,CAEL,EAAA,CAAA;IACA;IACA;IACA;IACA,IAAIE,KAAK,GAAG,EAAE,CAAC;IACf;IACA,IAAIN,GAAG,GAAG,EAAE,CAAA;IACZ,IAAIO,OAAO,GAAG,KAAK,CAAC;IACpB;IACA,SAASC,mBAAmB,GAAG;IAC3B,EAAA,IAAIC,UAAU,GAAGH,KAAK,CAAC3C,KAAK,CAAC,CAAC,CAAC,CAAA;IAC/B;IACA2C,EAAAA,KAAK,GAAG,EAAE,CAAA;MACVN,GAAG,GAAG,EAAE,CAAA;IACRO,EAAAA,OAAO,GAAG,KAAK,CAAA;IACfE,EAAAA,UAAU,CAACjG,OAAO,CAAC,UAAAkG,CAAC,EAAA;QAAA,OAAIA,CAAC,CAACC,GAAG,EAAE,CAAA;OAAC,CAAA,CAAA;IACpC,CAAA;IACA,SAASR,YAAY,CAAC3D,OAAO,EAAE;IAC3B,EAAA,IAAMN,EAAE,GAAGM,OAAO,CAACN,EAAE,CAAA;IACrB,EAAA,IAAI,CAAC8D,GAAG,CAAC9D,EAAE,CAAC,EAAE;IACV;IACAoE,IAAAA,KAAK,CAAC7D,IAAI,CAACD,OAAO,CAAC,CAAA;IACnBwD,IAAAA,GAAG,CAAC9D,EAAE,CAAC,GAAG,IAAI,CAAA;IACd;IACJ,GAAA;IACA;MACA,IAAI,CAACqE,OAAO,EAAE;IACVK,IAAAA,UAAU,CAACJ,mBAAmB,EAAE,CAAC,CAAC,CAAA;IAClCD,IAAAA,OAAO,GAAG,IAAI,CAAA;IAClB,GAAA;IACJ,CAAA;IACA;IACA,IAAIM,SAAS,GAAG,EAAE,CAAA;IAClB,IAAIC,OAAO,GAAG,KAAK,CAAA;IACnB;IACA,SAASC,cAAc,GAAG;IACtB,EAAA,IAAIC,GAAG,GAAGH,SAAS,CAAClD,KAAK,CAAC,CAAC,CAAC,CAAA;IAC5BmD,EAAAA,OAAO,GAAG,KAAK,CAAA;IACfD,EAAAA,SAAS,GAAG,EAAE,CAAA;IACdG,EAAAA,GAAG,CAACxG,OAAO,CAAC,UAAA8E,EAAE,EAAA;IAAA,IAAA,OAAIA,EAAE,EAAE,CAAA;OAAC,CAAA,CAAA;IAC3B,CAAA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACO,SAAS2B,QAAQ,CAAC3B,EAAE,EAAE;IACzB;IACA;IACAuB,EAAAA,SAAS,CAACpE,IAAI,CAAC6C,EAAE,CAAC,CAAA;MAClB,IAAI,CAACwB,OAAO,EAAE;IACVF,IAAAA,UAAU,CAAC,YAAM;IACbG,MAAAA,cAAc,EAAE,CAAA;SACnB,EAAE,CAAC,CAAC,CAAA;IACL;IACA;IACAD,IAAAA,OAAO,GAAG,IAAI,CAAA;IAClB,GAAA;IACJ;;IClKA;IACO,SAASI,SAAS,CAAC9B,EAAE,EAAE;IAC1B,EAAA,IAAM+B,IAAI,GAAG/B,EAAE,CAACgC,QAAQ,CAAA;IACxB;MACA,IAAID,IAAI,CAACnD,IAAI,EAAE;IACX;QACAqD,QAAQ,CAACjC,EAAE,CAAC,CAAA;IAChB,GAAA;IACA;MACA,IAAI+B,IAAI,CAACG,QAAQ,EAAE;IACf;QACAC,YAAY,CAACnC,EAAE,CAAC,CAAA;IACpB,GAAA;MAAE,IAAI+B,IAAI,CAACK,KAAK,EAAE;IACd;QACAC,SAAS,CAACrC,EAAE,CAAC,CAAA;IACjB,GAAA;IACJ,CAAA;IACA;IACA,SAASsC,KAAK,CAACtC,EAAE,EAAE9C,MAAM,EAAEnB,GAAG,EAAE;IAC5BF,EAAAA,MAAM,CAACgD,cAAc,CAACmB,EAAE,EAAEjE,GAAG,EAAE;IAC3B6D,IAAAA,GAAG,EAAG,SAAA,GAAA,GAAA;IACF;IACA,MAAA,OAAOI,EAAE,CAAC9C,MAAM,CAAC,CAACnB,GAAG,CAAC,CAAA;SACzB;QACD8D,GAAG,EAAA,SAAA,GAAA,CAACC,QAAQ,EAAE;UACV,IAAIA,QAAQ,KAAKE,EAAE,CAAC9C,MAAM,CAAC,CAACnB,GAAG,CAAC,EAAE;IAC9B,QAAA,OAAA;IACJ,OAAA;IACAiE,MAAAA,EAAE,CAAC9C,MAAM,CAAC,CAACnB,GAAG,CAAC,GAAG+D,QAAQ,CAAA;IAC9B,KAAA;IACJ,GAAC,CAAC,CAAA;IACN,CAAA;IACA;IACA,SAASmC,QAAQ,CAACjC,EAAE,EAAE;IAClB,EAAA,IAAIpB,IAAI,GAAGoB,EAAE,CAACgC,QAAQ,CAACpD,IAAI,CAAA;IAC3B;IACAA,EAAAA,IAAI,GAAG,OAAOA,IAAI,KAAK,UAAU,GAAGA,IAAI,CAACT,IAAI,CAAC,IAAI,CAAC,GAAGS,IAAI,CAAA;IAC1D;MACAoB,EAAE,CAACuC,KAAK,GAAG3D,IAAI,CAAA;IACf;IACA;MACAU,OAAO,CAACV,IAAI,CAAC,CAAC;IACd;IACA,EAAA,KAAK,IAAI7C,GAAG,IAAI6C,IAAI,EAAE;IAClB0D,IAAAA,KAAK,CAACtC,EAAE,EAAE,OAAO,EAAEjE,GAAG,CAAC,CAAA;IAC3B,GAAA;IACJ,CAAA;IACA;IACA,SAASoG,YAAY,CAACnC,EAAE,EAAE;IACtB;IACA,EAAA,IAAMkC,QAAQ,GAAGlC,EAAE,CAACgC,QAAQ,CAACE,QAAQ,CAAA;IACrC;IACA;MACA,IAAIM,QAAQ,GAAGxC,EAAE,CAACyC,iBAAiB,GAAG,EAAE,CAAC;IACzC;IACA,EAAA,KAAK,IAAI1G,GAAG,IAAImG,QAAQ,EAAE;IACtB,IAAA,IAAIQ,OAAO,GAAGR,QAAQ,CAACnG,GAAG,CAAC,CAAA;IAC3B;IACA;QACA,IAAI4G,EAAE,GAAG,OAAOD,OAAO,KAAK,UAAU,GAAGA,OAAO,GAAGA,OAAO,CAAC9C,GAAG,CAAA;IAC9D;QACA4C,QAAQ,CAACzG,GAAG,CAAC,GAAG,IAAIgE,OAAO,CAACC,EAAE,EAAE2C,EAAE,EAAE;IAAEnC,MAAAA,IAAI,EAAE,IAAA;IAAK,KAAC,CAAC,CAAC;IACpDoC,IAAAA,cAAc,CAAC5C,EAAE,EAAEjE,GAAG,EAAE2G,OAAO,CAAC,CAAA;IACpC,GAAA;IACJ,CAAA;IACA;IACA,SAASE,cAAc,CAAC1F,MAAM,EAAEnB,GAAG,EAAE2G,OAAO,EAAE;IAC1C;IACA;MACA,IAAMG,MAAM,GAAGH,OAAO,CAAC7C,GAAG,IAAK,YAAM,EAAI,CAAA;IACzC;IACA;IACAhE,EAAAA,MAAM,CAACgD,cAAc,CAAC3B,MAAM,EAAEnB,GAAG,EAAE;IAC/B;IACA6D,IAAAA,GAAG,EAAEkD,oBAAoB,CAAC/G,GAAG,CAAC;IAC9B8D,IAAAA,GAAG,EAAEgD,MAAAA;IACT,GAAC,CAAC,CAAA;IACN,CAAA;IACA;IACA;IACA,SAASC,oBAAoB,CAAC/G,GAAG,EAAE;IAC/B;IACA,EAAA,OAAO,YAAY;IACf;IACA;IACA;IACA,IAAA,IAAMqB,OAAO,GAAG,IAAI,CAACqF,iBAAiB,CAAC1G,GAAG,CAAC,CAAA;QAC3C,IAAIqB,OAAO,CAACqD,KAAK,EAAE;IACf;UACArD,OAAO,CAAC2F,QAAQ,EAAE,CAAC;IACvB,KAAA;;QACA,IAAI/F,GAAG,CAACE,MAAM,EAAE;IACZ;UACAE,OAAO,CAACsC,MAAM,EAAE,CAAA;IACpB,KAAA;IACA;QACA,OAAOtC,OAAO,CAAC0B,KAAK,CAAC;OACxB,CAAA;IACL,CAAA;;IACA,SAASuD,SAAS,CAACrC,EAAE,EAAE;IACnB,EAAA,IAAIoC,KAAK,GAAGpC,EAAE,CAACgC,QAAQ,CAACI,KAAK,CAAA;IAC7B;IACA,EAAA,KAAK,IAAIrG,GAAG,IAAIqG,KAAK,EAAE;IACnB;IACA,IAAA,IAAMY,OAAO,GAAGZ,KAAK,CAACrG,GAAG,CAAC,CAAA;IAC1B;IACA,IAAA,IAAI8B,KAAK,CAACmB,OAAO,CAACgE,OAAO,CAAC,EAAE;IACxB,MAAA,KAAK,IAAIxD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwD,OAAO,CAACrF,MAAM,EAAE6B,CAAC,EAAE,EAAE;YACrCyD,aAAa,CAACjD,EAAE,EAAEjE,GAAG,EAAEiH,OAAO,CAACxD,CAAC,CAAC,CAAC,CAAA;IACtC,OAAA;IACJ,KAAC,MAAM;IACH;IACAyD,MAAAA,aAAa,CAACjD,EAAE,EAAEjE,GAAG,EAAEiH,OAAO,CAAC,CAAA;IACnC,KAAA;IACJ,GAAA;IACJ,CAAA;IACA;IACA,SAASC,aAAa,CAACjD,EAAE,EAAEjE,GAAG,EAAEiH,OAAO,EAAE;IACrC;IACA,EAAA,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IAC7BA,IAAAA,OAAO,GAAGhD,EAAE,CAACgD,OAAO,CAAC,CAAA;IACzB,GAAA;IACA,EAAA,OAAOhD,EAAE,CAACkD,MAAM,CAACnH,GAAG,EAAEiH,OAAO,CAAC,CAAA;IAClC,CAAA;IACO,SAASG,cAAc,CAAC9G,GAAG,EAAE;IAChCA,EAAAA,GAAG,CAACM,SAAS,CAACyG,SAAS,GAAGvB,QAAQ,CAAC;MACnCwB,SAAS,CAAChH,GAAG,CAAC,CAAC;MACfA,GAAG,CAACM,SAAS,CAACuG,MAAM,GAAG,UAAUjD,QAAQ,EAAEC,EAAE,EAAgB;IACzD;IACA;IACA;IACA,IAAA,IAAIH,OAAO,CAAC,IAAI,EAAEE,QAAQ,EAAE;IAAEU,MAAAA,IAAI,EAAE,IAAA;SAAM,EAAET,EAAE,CAAC,CAAA;OAClD,CAAA;IACL;;IC1IA;IACA;IACA,IAAMoD,MAAM,iCAAiC,CAAC;IAC9C,IAAMC,YAAY,GAAUD,MAAAA,CAAAA,MAAAA,CAAAA,MAAM,EAAQA,OAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAM,MAAG,CAAC;IACpD,IAAME,YAAY,GAAG,IAAIC,MAAM,CAAMF,IAAAA,CAAAA,MAAAA,CAAAA,YAAY,EAAG,CAAC;IACrD,IAAMG,MAAM,GAAG,IAAID,MAAM,CAASF,OAAAA,CAAAA,MAAAA,CAAAA,YAAY,YAAS,CAAC;IACxD,IAAMI,SAAS,GAAG,2EAA2E,CAAC;IAC9F,IAAMC,aAAa,GAAG,YAAY,CAAC;IACnC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACO,SAASC,SAAS,CAACC,IAAI,EAAE;IAAE;IAC9B;MACA,IAAMC,YAAY,GAAG,CAAC,CAAA;MACtB,IAAMC,SAAS,GAAG,CAAC,CAAA;MACnB,IAAMzG,KAAK,GAAG,EAAE,CAAC;IACjB,EAAA,IAAI0G,aAAa,CAAC;IAClB,EAAA,IAAIC,IAAI,CAAC;IACT;IACA,EAAA,SAASC,gBAAgB,CAACC,GAAG,EAAEC,KAAK,EAAE;QAClC,OAAO;IACHD,MAAAA,GAAG,EAAHA,GAAG;IACHE,MAAAA,IAAI,EAAEP,YAAY;IAClBQ,MAAAA,QAAQ,EAAE,EAAE;IACZF,MAAAA,KAAK,EAALA,KAAK;IACLG,MAAAA,MAAM,EAAE,IAAA;SACX,CAAA;IACL,GAAA;IACA;IACA,EAAA,SAASC,KAAK,CAACL,GAAG,EAAEC,KAAK,EAAE;IACvB;IACA,IAAA,IAAIK,IAAI,GAAGP,gBAAgB,CAACC,GAAG,EAAEC,KAAK,CAAC,CAAA;QACvC,IAAI,CAACH,IAAI,EAAE;IACP;IACAA,MAAAA,IAAI,GAAGQ,IAAI,CAAA;IACf,KAAA;IACA,IAAA,IAAIT,aAAa,EAAE;IACf;UACAS,IAAI,CAACF,MAAM,GAAGP,aAAa,CAAA;IAC3B;IACAA,MAAAA,aAAa,CAACM,QAAQ,CAAClH,IAAI,CAACqH,IAAI,CAAC,CAAA;IACrC,KAAA;IACAnH,IAAAA,KAAK,CAACF,IAAI,CAACqH,IAAI,CAAC,CAAC;QACjBT,aAAa,GAAGS,IAAI,CAAC;IACzB,GAAA;;MACA,SAASC,KAAK,CAACC,IAAI,EAAE;IACjB;QACAA,IAAI,GAAGA,IAAI,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IAC/B;IACA;IACAD,IAAAA,IAAI,IAAIX,aAAa,CAACM,QAAQ,CAAClH,IAAI,CAAC;IAChCiH,MAAAA,IAAI,EAAEN,SAAS;IACfY,MAAAA,IAAI,EAAJA,IAAI;IACJJ,MAAAA,MAAM,EAAEP,aAAAA;IACZ,KAAC,CAAC,CAAA;IACN,GAAA;MACA,SAASa,GAAG,CAACV,GAAG,EAAE;IACd;IACA;IACA,IAAW7G,KAAK,CAACG,GAAG,GAAG;QACvBuG,aAAa,GAAG1G,KAAK,CAACA,KAAK,CAACI,MAAM,GAAG,CAAC,CAAC,CAAA;IAC3C,GAAA;IACA;MACA,SAASoH,OAAO,CAACC,CAAC,EAAE;IAChBlB,IAAAA,IAAI,GAAGA,IAAI,CAACmB,SAAS,CAACD,CAAC,CAAC,CAAA;IACxB;IACJ,GAAA;IACA;IACA,EAAA,SAASE,aAAa,GAAG;IACrB,IAAA,IAAMT,KAAK,GAAGX,IAAI,CAACqB,KAAK,CAAC3B,YAAY,CAAC,CAAA;IACtC;IACA,IAAA,IAAIiB,KAAK,EAAE;IACP,MAAA,IAAMU,KAAK,GAAG;IACV;IACAC,QAAAA,OAAO,EAAEX,KAAK,CAAC,CAAC,CAAC;IACjBJ,QAAAA,KAAK,EAAE,EAAA;WACV,CAAA;IACD;UACAU,OAAO,CAACN,KAAK,CAAC,CAAC,CAAC,CAAC9G,MAAM,CAAC,CAAC;IACzB;IACA;UACA,IAAI0H,IAAI,EAAEP,IAAG,CAAA;UACb,OAAO,EAAEA,IAAG,GAAGhB,IAAI,CAACqB,KAAK,CAACvB,aAAa,CAAC,CAAA;IACpC;cACIyB,IAAI,GAAGvB,IAAI,CAACqB,KAAK,CAACxB,SAAS,CAAC,CAAC,EAAE;IACnC;IACAoB,QAAAA,OAAO,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC1H,MAAM,CAAC,CAAA;IACvB;IACAwH,QAAAA,KAAK,CAACd,KAAK,CAAChH,IAAI,CAAC;IACbiI,UAAAA,IAAI,EAAED,IAAI,CAAC,CAAC,CAAC;IACb;IACAvG,UAAAA,KAAK,EAAEuG,IAAI,CAAC,CAAC,CAAC,IAAIA,IAAI,CAAC,CAAC,CAAC,IAAIA,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI;IAChD,SAAC,CAAC,CAAA;IACN,OAAA;IACA;IACA,MAAA,IAAIP,IAAG,EAAE;IACLC,QAAAA,OAAO,CAACD,IAAG,CAAC,CAAC,CAAC,CAACnH,MAAM,CAAC,CAAA;IAC1B,OAAA;IACA;IACA,MAAA,OAAOwH,KAAK,CAAA;IAChB,KAAA;IACA;IACA,IAAA,OAAO,KAAK,CAAC;IACjB,GAAA;IACA;IACA,EAAA,OAAOrB,IAAI,EAAE;IACT;IACA;IACA;IACA;IACA,IAAA,IAAIyB,OAAO,GAAGzB,IAAI,CAAC0B,OAAO,CAAC,GAAG,CAAC,CAAA;QAC/B,IAAID,OAAO,IAAI,CAAC,EAAE;UACd,IAAME,aAAa,GAAGP,aAAa,EAAE,CAAA;IACrC,MAAA,IAAIO,aAAa,EAAE;IAAE;IACjB;YACAhB,KAAK,CAACgB,aAAa,CAACL,OAAO,EAAEK,aAAa,CAACpB,KAAK,CAAC,CAAA;IACjD,QAAA,SAAA;IACJ,OAAA;IACA;IACA,MAAA,IAAIqB,WAAW,GAAG5B,IAAI,CAACqB,KAAK,CAACzB,MAAM,CAAC,CAAA;IACpC,MAAA,IAAIgC,WAAW,EAAE;IACbZ,QAAAA,GAAG,CAACY,WAAW,CAAC,CAAC,CAAC,CAAC,CAAA;IACnBX,QAAAA,OAAO,CAACW,WAAW,CAAC,CAAC,CAAC,CAAC/H,MAAM,CAAC,CAAA;IAC9B,QAAA,SAAA;IACJ,OAAA;IACJ,KAAA;IACA;QACA,IAAI4H,OAAO,GAAG,CAAC,EAAE;UACb,IAAIX,IAAI,GAAGd,IAAI,CAACmB,SAAS,CAAC,CAAC,EAAEM,OAAO,CAAC,CAAC;IACtC,MAAA,IAAIX,IAAI,EAAE;IAAE;YACRD,KAAK,CAACC,IAAI,CAAC,CAAA;IACXG,QAAAA,OAAO,CAACH,IAAI,CAACjH,MAAM,CAAC,CAAA;IACpB;IACJ,OAAA;IACJ,KAAA;IACJ,GAAA;IACA;IACA;IACA,EAAA,OAAOuG,IAAI,CAAA;IACf;;ICzJA,IAAMyB,YAAY,GAAG,0BAA0B,CAAC;IAChD,SAASC,GAAG,CAAClB,IAAI,EAAE;IACf;IACA,EAAA,IAAIA,IAAI,CAACJ,IAAI,KAAK,CAAC,EAAE;QACjB,OAAOuB,OAAO,CAACnB,IAAI,CAAC,CAAA;IACxB,GAAC,MAAM;IACH;IACA,IAAA,IAAIE,IAAI,GAAGF,IAAI,CAACE,IAAI,CAAA;IACpB;IACA,IAAA,IAAI,CAACe,YAAY,CAACG,IAAI,CAAClB,IAAI,CAAC,EAAE;IAAE;IAC5B;IACA,MAAA,OAAA,KAAA,CAAA,MAAA,CAAamB,IAAI,CAACC,SAAS,CAACpB,IAAI,CAAC,EAAA,GAAA,CAAA,CAAA;IACrC,KAAC,MAAM;IAAE;IACL;IACA;UACA,IAAIqB,MAAM,GAAG,EAAE,CAAA;IACf;IACA,MAAA,IAAId,KAAK,CAAA;IACT;IACA;UACAQ,YAAY,CAACO,SAAS,GAAG,CAAC,CAAA;UAC1B,IAAIA,SAAS,GAAG,CAAC,CAAC;UAClB,OAAOf,KAAK,GAAGQ,YAAY,CAACQ,IAAI,CAACvB,IAAI,CAAC,EAAE;IACpC;IACA,QAAA,IAAIwB,KAAK,GAAGjB,KAAK,CAACiB,KAAK,CAAC;YACxB,IAAIA,KAAK,GAAGF,SAAS,EAAE;IACnB;IACAD,UAAAA,MAAM,CAAC5I,IAAI,CAAC0I,IAAI,CAACC,SAAS,CAACpB,IAAI,CAACrG,KAAK,CAAC2H,SAAS,EAAEE,KAAK,CAAC,CAAC,CAAC,CAAA;IAC7D,SAAA;YACAH,MAAM,CAAC5I,IAAI,CAAA,KAAA,CAAA,MAAA,CAAO8H,KAAK,CAAC,CAAC,CAAC,CAACkB,IAAI,EAAE,EAAA,GAAA,CAAA,CAAI,CAAC;IACtC;IACA;YACAH,SAAS,GAAGE,KAAK,GAAGjB,KAAK,CAAC,CAAC,CAAC,CAACxH,MAAM,CAAA;IACvC,OAAA;IACA,MAAA,IAAIuI,SAAS,GAAGtB,IAAI,CAACjH,MAAM,EAAE;IACzB;IACAsI,QAAAA,MAAM,CAAC5I,IAAI,CAAC0I,IAAI,CAACC,SAAS,CAACpB,IAAI,CAACrG,KAAK,CAAC2H,SAAS,CAAC,CAAC,CAAC,CAAA;IACtD,OAAA;IACA;IACA,MAAA,OAAA,KAAA,CAAA,MAAA,CAAaD,MAAM,CAACK,IAAI,CAAC,GAAG,CAAC,EAAA,GAAA,CAAA,CAAA;IACjC,KAAA;IAEJ,GAAA;IACJ,CAAA;IACA,SAASC,WAAW,CAAChC,QAAQ,EAAE;IAC3B,EAAA,OAAOA,QAAQ,CAACiC,GAAG,CAAC,UAAAC,KAAK,EAAA;QAAA,OAAIb,GAAG,CAACa,KAAK,CAAC,CAAA;IAAA,GAAA,CAAC,CAACH,IAAI,CAAC,GAAG,CAAC,CAAA;IACtD,CAAA;IACA;IACA,SAASI,QAAQ,CAACrC,KAAK,EAAE;MACrB,IAAIsC,GAAG,GAAG,EAAE,CAAC;MAAA,IAC0B,KAAA,GAAA,SAAA,KAAA,GAAA;IACnC,IAAA,IAAItB,IAAI,GAAGhB,KAAK,CAAC7E,CAAC,CAAC,CAAA;IACnB,IAAA,IAAI6F,IAAI,CAACC,IAAI,KAAK,OAAO,EAAE;IACvB;UACA,IAAIsB,GAAG,GAAG,EAAE,CAAA;IACZ;IACAvB,MAAAA,IAAI,CAACvG,KAAK,CAAC+H,KAAK,CAAC,GAAG,CAAC,CAACzL,OAAO,CAAC,UAAAiE,IAAI,EAAI;IAClC;IACA,QAAA,IAAA,WAAA,GAAmBA,IAAI,CAACwH,KAAK,CAAC,GAAG,CAAC;IAAA,UAAA,YAAA,GAAA,cAAA,CAAA,WAAA,EAAA,CAAA,CAAA;cAA7B9K,GAAG,GAAA,YAAA,CAAA,CAAA,CAAA;cAAE+C,KAAK,GAAA,YAAA,CAAA,CAAA,CAAA,CAAA;IACf8H,QAAAA,GAAG,CAAC7K,GAAG,CAAC,GAAG+C,KAAK,CAAC;IACrB,OAAC,CAAC,CAAA;;UACFuG,IAAI,CAACvG,KAAK,GAAG8H,GAAG,CAAA;IACpB,KAAA;IACAD,IAAAA,GAAG,IAAOtB,EAAAA,CAAAA,MAAAA,CAAAA,IAAI,CAACC,IAAI,EAAIS,GAAAA,CAAAA,CAAAA,MAAAA,CAAAA,IAAI,CAACC,SAAS,CAACX,IAAI,CAACvG,KAAK,CAAC,EAAG,GAAA,CAAA,CAAA;OACvD,CAAA;IAdD,EAAA,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6E,KAAK,CAAC1G,MAAM,EAAE6B,CAAC,EAAE,EAAA;IAAA,IAAA,KAAA,EAAA,CAAA;IAAA,GAAA;IAerC;IACA;MACA,OAAWmH,GAAAA,CAAAA,MAAAA,CAAAA,GAAG,CAACpI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAA,GAAA,CAAA,CAAA;IAC/B,CAAA;IACA,SAASsH,OAAO,CAACiB,GAAG,EAAE;IAClB;IACA,EAAA,IAAIvC,QAAQ,GAAGgC,WAAW,CAACO,GAAG,CAACvC,QAAQ,CAAC,CAAA;IACxC,EAAA,IAAIwC,IAAI,GAAA,MAAA,CAAA,MAAA,CAAWD,GAAG,CAAC1C,GAAG,EAAM0C,KAAAA,CAAAA,CAAAA,MAAAA,CAAAA,GAAG,CAACzC,KAAK,CAAC1G,MAAM,GAAG,CAAC,GAAG+I,QAAQ,CAACI,GAAG,CAACzC,KAAK,CAAC,GAAG,MAAM,cAAIyC,GAAG,CAACvC,QAAQ,CAAC5G,MAAM,GAAA,GAAA,CAAA,MAAA,CAAO4G,QAAQ,CAAA,GAAK,EAAE,EAAI,GAAA,CAAA,CAAA;IACpI;IACA,EAAA,OAAOwC,IAAI,CAAA;IACf,CAAA;IACA;IACO,SAASC,iBAAiB,CAACC,QAAQ,EAAE;IACxC;IACA;IACA,EAAA,IAAIH,GAAG,GAAGjD,SAAS,CAACoD,QAAQ,CAAC,CAAA;IAC7B;IACA;IACA;IACA;IACA;IACA;IACA;IACA,EAAA,IAAIF,IAAI,GAAGlB,OAAO,CAACiB,GAAG,CAAC,CAAA;IACvB;IACA;MACAC,IAAI,GAAA,oBAAA,CAAA,MAAA,CAAwBA,IAAI,EAAG,GAAA,CAAA,CAAA;IACnC;IACA;IACA,EAAA,IAAIG,MAAM,GAAG,IAAIC,QAAQ,CAACJ,IAAI,CAAC,CAAA;IAC/B;IACA;IACA;IACA;IACA;IACA;IACA;IACA,EAAA,OAAOG,MAAM,CAAA;IACjB,CAAA;;IAEA;IACI;IACA;IACJ;IACA;IACA;;IC/GA;IACA;IACA,IAAME,aAAa,GAAG,SAAhBA,aAAa,CAAIhD,GAAG,EAAK;IAAE;IAC7B,EAAA,OAAO,CAAC,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAACiD,QAAQ,CAACjD,GAAG,CAAC,CAAA;IACxE,CAAC,CAAA;IACM,SAASkD,kBAAkB,CAACtH,EAAE,EAAEoE,GAAG,EAAExF,IAAI,EAAe;IAC3D;MACA,IAAIA,IAAI,IAAI,IAAI,EAAE;QACdA,IAAI,GAAG,EAAE,CAAA;IACb,GAAA;IACA,EAAA,IAAI7C,GAAG,GAAG6C,IAAI,CAAC7C,GAAG,CAAA;IAClB,EAAA,IAAIA,GAAG,EAAE,OAAO6C,IAAI,CAAC7C,GAAG,CAAA;IACxB;IACAwL,EAAAA,OAAO,CAACC,GAAG,CAACJ,aAAa,CAAChD,GAAG,CAAC,CAAC,CAAA;IAAC,EAAA,KAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EARiBG,QAAQ,GAAA,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;QAARA,QAAQ,CAAA,IAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,IAAA,CAAA,CAAA;IAAA,GAAA;IASzD,EAAA,IAAI6C,aAAa,CAAChD,GAAG,CAAC,EAAE;IACpB;IACA,IAAA,OAAOqD,KAAK,CAACzH,EAAE,EAAEoE,GAAG,EAAErI,GAAG,EAAE6C,IAAI,EAAE2F,QAAQ,EAAE,IAAI,CAAC,CAAA;IACpD,GAAC,MAAM;IACH;QACA,IAAImD,IAAI,GAAG1H,EAAE,CAACgC,QAAQ,CAACvG,UAAU,CAAC2I,GAAG,CAAC,CAAC;IACvCmD,IAAAA,OAAO,CAACC,GAAG,CAACE,IAAI,CAAC,CAAA;IACjB,IAAA,OAAOC,oBAAoB,CAAC3H,EAAE,EAAEoE,GAAG,EAAErI,GAAG,EAAE6C,IAAI,EAAE2F,QAAQ,EAAEmD,IAAI,CAAC,CAAA;IACnE,GAAA;IACJ,CAAA;IACA;IACA,SAASC,oBAAoB,CAAC3H,EAAE,EAAEoE,GAAG,EAAErI,GAAG,EAAE6C,IAAI,EAAE2F,QAAQ,EAAEmD,IAAI,EAAE;IAC9D,EAAA,IAAI,OAAOA,CAAAA,IAAI,CAAK,KAAA,QAAQ,EAAE;IAC1B;IACA;IACR;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACQ;QACAA,IAAI,GAAG1H,EAAE,CAACgC,QAAQ,CAAC1F,KAAK,CAACE,MAAM,CAACkL,IAAI,CAAC,CAAA;IACzC,GAAA;MACA9I,IAAI,CAACvD,IAAI,GAAG;QACRuM,IAAI,EAAA,SAAA,IAAA,CAACH,KAAK,EAAE;IACR;IACA;UACA,IAAII,QAAQ,GAAGJ,KAAK,CAACK,iBAAiB,GAAG,IAAIL,KAAK,CAACM,iBAAiB,CAACL,IAAI,EAAA,CAAA;UACzEG,QAAQ,CAACG,MAAM,EAAE,CAAC;IACtB,KAAA;OACH,CAAA;IACD;IACA;IACA,EAAA,OAAOP,KAAK,CAACzH,EAAE,EAAEoE,GAAG,EAAErI,GAAG,EAAE6C,IAAI,EAAE2F,QAAQ,EAAE,IAAI,EAAE;IAAEmD,IAAAA,IAAI,EAAJA,IAAAA;IAAK,GAAC,CAAC,CAAA;IAC9D,CAAA;IACA;IACO,SAASO,eAAe,CAACjI,EAAE,EAAE4E,IAAI,EAAE;IACtC;IACA,EAAA,OAAO6C,KAAK,CAACzH,EAAE,EAAEU,SAAS,EAAEA,SAAS,EAAEA,SAAS,EAAEA,SAAS,EAAEkE,IAAI,CAAC,CAAA;IACtE,CAAA;IACA;IACA;IACA,SAAS6C,KAAK,CAACzH,EAAE,EAAEoE,GAAG,EAAErI,GAAG,EAAE6C,IAAI,EAAE2F,QAAQ,EAAEK,IAAI,EAAEmD,iBAAiB,EAAE;MAClE,OAAO;IACH/H,IAAAA,EAAE,EAAFA,EAAE;IACFoE,IAAAA,GAAG,EAAHA,GAAG;IACHrI,IAAAA,GAAG,EAAHA,GAAG;IACH6C,IAAAA,IAAI,EAAJA,IAAI;IACJ2F,IAAAA,QAAQ,EAARA,QAAQ;IACRK,IAAAA,IAAI,EAAJA,IAAI;QACJmD,iBAAiB,EAAjBA,iBAAiB;IACjB;OACH,CAAA;IACL,CAAA;IACA;IACO,SAASG,WAAW,CAACC,MAAM,EAAEC,MAAM,EAAE;IACxC,EAAA,OAAOD,MAAM,CAAC/D,GAAG,KAAKgE,MAAM,CAAChE,GAAG,IAAI+D,MAAM,CAACpM,GAAG,KAAKqM,MAAM,CAACrM,GAAG,CAAA;IACjE;;IC3EA,SAASsM,eAAe,CAACZ,KAAK,EAAE;IAC5B,EAAA,IAAI7I,IAAI,GAAG6I,KAAK,CAAC7I,IAAI,CAAA;IACrB;MACAA,IAAI,GAAGA,IAAI,CAACvD,IAAI,CAAA;IAChB,EAAA,IAAIuD,IAAI,EAAEA,IAAI,GAAGA,IAAI,CAACgJ,IAAI,CAAA;IAC1B,EAAA,IAAIhJ,IAAI,EAAE;QACNA,IAAI,CAAC6I,KAAK,CAAC,CAAC;IAChB,GAAA;;MACA,IAAIA,KAAK,CAACK,iBAAiB,EAAE;IACzB,IAAA,OAAO,IAAI,CAAA;IACf,GAAA;IACA,EAAA,OAAO,KAAK,CAAA;IAChB,CAAA;IACO,SAASQ,SAAS,CAACb,KAAK,EAAE;IAC7B;MACA,IAAI,CAACA,KAAK,EAAE,OAAA;IACZ,EAAA,IAAMrD,GAAG,GAA2BqD,KAAK,CAAnCrD,GAAG;QAAExF,IAAI,GAAqB6I,KAAK,CAA9B7I,IAAI;QAAE2F,QAAQ,GAAWkD,KAAK,CAAxBlD,QAAQ;QAAEK,IAAI,GAAK6C,KAAK,CAAd7C,IAAI,CAAA;IAC/B,EAAA,IAAI,OAAOR,GAAG,KAAK,QAAQ,EAAE;IAAE;IAC3B;IACA,IAAA,IAAIiE,eAAe,CAACZ,KAAK,CAAC,EAAE;IACxB;IACA,MAAA,OAAOA,KAAK,CAACK,iBAAiB,CAACS,GAAG,CAAA;IACtC,KAAA;IACA;IACA;QACAd,KAAK,CAACe,EAAE,GAAGC,QAAQ,CAACC,aAAa,CAACtE,GAAG,CAAC,CAAA;QACtCuE,UAAU,CAAClB,KAAK,CAACe,EAAE,EAAE,EAAE,EAAE5J,IAAI,CAAC,CAAC;IAC/B2F,IAAAA,QAAQ,CAACnJ,OAAO,CAAC,UAAAqL,KAAK,EAAI;IACtB;IACA;UACA,IAAI,CAACA,KAAK,EAAE,OAAA;UACZgB,KAAK,CAACe,EAAE,CAACI,WAAW,CAACN,SAAS,CAAC7B,KAAK,CAAC,CAAC,CAAC;IAC3C,KAAC,CAAC,CAAA;IACN,GAAC,MAAM;IACH;QACAgB,KAAK,CAACe,EAAE,GAAGC,QAAQ,CAACI,cAAc,CAACjE,IAAI,CAAC,CAAA;IAC5C,GAAA;IACA;IACA;MACA,OAAO6C,KAAK,CAACe,EAAE,CAAA;IACnB,CAAA;IACO,SAASG,UAAU,CAACH,EAAE,EAA6B;MAAA,IAA3BM,QAAQ,GAAG,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,EAAE,CAAA;MAAA,IAAEC,KAAK,GAAG,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,EAAE,CAAA;IACpD;IACA;IACA,EAAA,IAAIC,SAAS,GAAGF,QAAQ,CAACG,KAAK,IAAI,EAAE,CAAA;IACpC,EAAA,IAAIC,SAAS,GAAGH,KAAK,CAACE,KAAK,IAAI,EAAE,CAAA;IACjC,EAAA,KAAK,IAAIlN,GAAG,IAAIiN,SAAS,EAAE;IACvB,IAAA,IAAI,CAACE,SAAS,CAACnN,GAAG,CAAC,EAAE;IACjByM,MAAAA,EAAE,CAACS,KAAK,CAAClN,GAAG,CAAC,GAAG,EAAE,CAAA;IACtB,KAAA;IACJ,GAAA;IACA;IACA,EAAA,KAAK,IAAIA,IAAG,IAAI+M,QAAQ,EAAE;IACtB,IAAA,IAAI,CAACC,KAAK,CAAChN,IAAG,CAAC,EAAE;IACbyM,MAAAA,EAAE,CAACW,eAAe,CAACpN,IAAG,CAAC,CAAA;IAC3B,KAAA;IACJ,GAAA;IACA;IACA,EAAA,KAAK,IAAIA,KAAG,IAAIgN,KAAK,EAAE;QACnB,IAAIhN,KAAG,KAAK,OAAO,EAAE;IACjB;IACA,MAAA,KAAK,IAAIqN,SAAS,IAAIL,KAAK,CAACE,KAAK,EAAE;YAC/BT,EAAE,CAACS,KAAK,CAACG,SAAS,CAAC,GAAGL,KAAK,CAACE,KAAK,CAACG,SAAS,CAAC,CAAA;IAChD,OAAA;IACJ,KAAC,MAAM;UACHZ,EAAE,CAACa,YAAY,CAACtN,KAAG,EAAEgN,KAAK,CAAChN,KAAG,CAAC,CAAC,CAAA;IACpC,KAAA;IACJ,GAAA;IACJ,CAAA;IACO,SAASuN,KAAK,CAACC,QAAQ,EAAE9B,KAAK,EAAE;MACnC,IAAI,CAAC8B,QAAQ,EAAE;IACX;IACA,IAAA,OAAOjB,SAAS,CAACb,KAAK,CAAC,CAAC;IAC5B,GAAA;IACA;IACA,EAAA,IAAM+B,aAAa,GAAGD,QAAQ,CAACE,QAAQ,CAAA;IACvC;IACA,EAAA,IAAID,aAAa,EAAE;QACf,IAAME,GAAG,GAAGH,QAAQ,CAAC;IACrB,IAAA,IAAMI,SAAS,GAAGD,GAAG,CAACE,UAAU,CAAC;IACjC,IAAA,IAAIC,MAAM,GAAGvB,SAAS,CAACb,KAAK,CAAC,CAAA;IAC7B;QACAkC,SAAS,CAACG,YAAY,CAACD,MAAM,EAAEH,GAAG,CAACK,WAAW,CAAC,CAAC;IAChDJ,IAAAA,SAAS,CAACK,WAAW,CAACN,GAAG,CAAC,CAAC;IAC3B,IAAA,OAAOG,MAAM,CAAA;IACjB,GAAC,MAAM;IACH;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAA,OAAOI,UAAU,CAACV,QAAQ,EAAE9B,KAAK,CAAC,CAAA;IACtC,GAAA;IACJ,CAAA;IACA,SAASwC,UAAU,CAACV,QAAQ,EAAE9B,KAAK,EAAE;IACjC;IACA,EAAA,IAAI,CAACS,WAAW,CAACqB,QAAQ,EAAE9B,KAAK,CAAC,EAAE;IAC/B;IACA,IAAA,IAAIe,GAAE,GAAGF,SAAS,CAACb,KAAK,CAAC,CAAA;IACzB8B,IAAAA,QAAQ,CAACf,EAAE,CAACoB,UAAU,CAACM,YAAY,CAAC1B,GAAE,EAAEe,QAAQ,CAACf,EAAE,CAAC,CAAA;IACpD,IAAA,OAAOA,GAAE,CAAA;IACb,GAAA;MACA,IAAIA,EAAE,GAAGf,KAAK,CAACe,EAAE,GAAGe,QAAQ,CAACf,EAAE,CAAC;IAChC;IACA,EAAA,IAAI,CAACe,QAAQ,CAACnF,GAAG,EAAE;IACf,IAAA,IAAImF,QAAQ,CAAC3E,IAAI,KAAK6C,KAAK,CAAC7C,IAAI,EAAE;IAC9B4D,MAAAA,EAAE,CAAC2B,WAAW,GAAG1C,KAAK,CAAC7C,IAAI,CAAC;IAChC,KAAA;IACJ,GAAC;IACD;IACA;MACA+D,UAAU,CAACH,EAAE,EAAEe,QAAQ,CAAC3K,IAAI,EAAE6I,KAAK,CAAC7I,IAAI,CAAC,CAAA;IACzC;IACA,EAAA,IAAIwL,WAAW,GAAGb,QAAQ,CAAChF,QAAQ,IAAI,EAAE,CAAA;IACzC,EAAA,IAAI8F,WAAW,GAAG5C,KAAK,CAAClD,QAAQ,IAAI,EAAE,CAAA;IACtC;MACA,IAAI6F,WAAW,CAACzM,MAAM,GAAG,CAAC,IAAI0M,WAAW,CAAC1M,MAAM,GAAG,CAAC,EAAE;IAClD;IACA;IACA2M,IAAAA,cAAc,CAAC9B,EAAE,EAAE4B,WAAW,EAAEC,WAAW,CAAC,CAAC;IACjD,GAAC,MAAM,IAAIA,WAAW,CAAC1M,MAAM,GAAG,CAAC,EAAE;IAC/B;IACA;IACA4M,IAAAA,aAAa,CAAC/B,EAAE,EAAE6B,WAAW,CAAC,CAAA;IAClC,GAAC,MAAM,IAAID,WAAW,CAACzM,MAAM,GAAG,CAAC,EAAE;IAC/B;IACA;IACA6K,IAAAA,EAAE,CAACgC,SAAS,GAAG,EAAE,CAAC;IACtB,GAAA;;IACA,EAAA,OAAOhC,EAAE,CAAA;IACb,CAAA;IACA,SAAS+B,aAAa,CAAC/B,EAAE,EAAE6B,WAAW,EAAE;IACpC,EAAA,KAAK,IAAI7K,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6K,WAAW,CAAC1M,MAAM,EAAE6B,CAAC,EAAE,EAAE;IACzC,IAAA,IAAIiH,KAAK,GAAG4D,WAAW,CAAC7K,CAAC,CAAC,CAAA;IAC1BgJ,IAAAA,EAAE,CAACI,WAAW,CAACN,SAAS,CAAC7B,KAAK,CAAC,CAAC,CAAA;IACpC,GAAA;IACJ,CAAA;IACA,SAAS6D,cAAc,CAAC9B,EAAE,EAAE4B,WAAW,EAAEC,WAAW,EAAE;IAClD;IACA;IACA;MACA,IAAII,aAAa,GAAG,CAAC,CAAA;MACrB,IAAIC,aAAa,GAAG,CAAC,CAAA;IACrB,EAAA,IAAIC,WAAW,GAAGP,WAAW,CAACzM,MAAM,GAAG,CAAC,CAAA;IACxC,EAAA,IAAIiN,WAAW,GAAGP,WAAW,CAAC1M,MAAM,GAAG,CAAC,CAAA;IACxC;IACA,EAAA,IAAIkN,aAAa,GAAGT,WAAW,CAAC,CAAC,CAAC,CAAA;IAClC,EAAA,IAAIU,aAAa,GAAGT,WAAW,CAAC,CAAC,CAAC,CAAA;IAClC,EAAA,IAAIU,WAAW,GAAGX,WAAW,CAACO,WAAW,CAAC,CAAA;IAC1C,EAAA,IAAIK,WAAW,GAAGX,WAAW,CAACO,WAAW,CAAC,CAAA;IAC1C;IACA;IACA;MACA,IAAIK,WAAW,GAAG,CAAC,CAAC;MACpB,IAAIC,WAAW,GAAG,IAAI,CAAA;IACtB;MACA,SAASC,cAAc,CAAC5G,QAAQ,EAAE;QAC9B,IAAIiC,GAAG,GAAG,EAET,CAAA;IACDjC,IAAAA,QAAQ,CAACnJ,OAAO,CAAC,UAACqL,KAAK,EAAEL,KAAK,EAAK;IAC/BI,MAAAA,GAAG,CAACC,KAAK,CAAC1K,GAAG,CAAC,GAAGqK,KAAK,CAAA;IAC1B,KAAC,CAAC,CAAA;IACF,IAAA,OAAOI,GAAG,CAAA;IACd,GAAA;IACA,EAAA,IAAIA,GAAG,GAAG2E,cAAc,CAACf,WAAW,CAAC,CAAA;IACrC7C,EAAAA,OAAO,CAACC,GAAG,CAAChB,GAAG,CAAC,CAAA;IAChB,EAAA,OAAOiE,aAAa,IAAIE,WAAW,IAAID,aAAa,IAAIE,WAAW,EAAE;IACjE;QACA,IAAI,CAACC,aAAa,EAAE;IAChBA,MAAAA,aAAa,GAAGT,WAAW,CAAC,EAAEK,aAAa,CAAC,CAAA;IAChD,KAAC,MAAM,IAAI,CAACM,WAAW,EAAE;IACrBA,MAAAA,WAAW,GAAGX,WAAW,CAAC,EAAEO,WAAW,CAAC,CAAA;IAC5C,KAAA;IACA;IACA;IAAA,SACK,IAAIzC,WAAW,CAAC2C,aAAa,EAAEC,aAAa,CAAC,EAAE;IAChD;IACAb,MAAAA,UAAU,CAACY,aAAa,EAAEC,aAAa,CAAC,CAAA;IACxCD,MAAAA,aAAa,GAAGT,WAAW,CAAC,EAAEK,aAAa,CAAC,CAAC;IAC7CK,MAAAA,aAAa,GAAGT,WAAW,CAAC,EAAEK,aAAa,CAAC,CAAA;IAC5C;IACA;IACJ,KAAA;IACA;IAAA,SACK,IAAIxC,WAAW,CAAC6C,WAAW,EAAEC,WAAW,CAAC,EAAE;IAC5C;IACAE,MAAAA,WAAW,GAAGd,WAAW,CAACa,WAAW,CAAC,CAAA;IACtC;IACAF,MAAAA,WAAW,GAAGX,WAAW,CAAC,EAAEO,WAAW,CAAC,CAAC;IACzCK,MAAAA,WAAW,GAAGX,WAAW,CAAC,EAAEO,WAAW,CAAC,CAAA;IACxCK,MAAAA,WAAW,GAAGN,WAAW,CAAA;IAC7B,KAAA;IACA;IAAA,SACK,IAAIzC,WAAW,CAAC6C,WAAW,EAAED,aAAa,CAAC,EAAE;IAC9C;UACAtC,EAAE,CAACsB,YAAY,CAACiB,WAAW,CAACvC,EAAE,EAAEqC,aAAa,CAACrC,EAAE,CAAC,CAAA;IACjD;IACAyB,MAAAA,UAAU,CAACc,WAAW,EAAED,aAAa,CAAC,CAAA;IACtCC,MAAAA,WAAW,GAAGX,WAAW,CAAC,EAAEO,WAAW,CAAC,CAAA;IACxCG,MAAAA,aAAa,GAAGT,WAAW,CAAC,EAAEK,aAAa,CAAC,CAAA;SAC/C,MACI,IAAIxC,WAAW,CAAC2C,aAAa,EAAEG,WAAW,CAAC,EAAE;IAC9C;IACAxC,MAAAA,EAAE,CAACsB,YAAY,CAACe,aAAa,CAACrC,EAAE,EAAEwC,WAAW,CAACxC,EAAE,CAACuB,WAAW,CAAC,CAAA;IAC7D;IACAE,MAAAA,UAAU,CAACY,aAAa,EAAEG,WAAW,CAAC,CAAA;IACtCH,MAAAA,aAAa,GAAGT,WAAW,CAAC,EAAEK,aAAa,CAAC,CAAA;IAC5CO,MAAAA,WAAW,GAAGX,WAAW,CAAC,EAAEO,WAAW,CAAC,CAAA;IAC5C,KAAC,MAAM;IACH;IACA;UACA,IAAIQ,SAAS,GAAG5E,GAAG,CAACsE,aAAa,CAAC/O,GAAG,CAAC,CAAC;UACvC,IAAIqP,SAAS,KAAK1K,SAAS,EAAE;IACzB,QAAA,IAAI2K,SAAS,GAAGjB,WAAW,CAACgB,SAAS,CAAC,CAAC;YACvC5C,EAAE,CAACsB,YAAY,CAACuB,SAAS,CAAC7C,EAAE,EAAEqC,aAAa,CAACrC,EAAE,CAAC,CAAA;IAC/C4B,QAAAA,WAAW,CAACgB,SAAS,CAAC,GAAG1K,SAAS,CAAC;IACnCuJ,QAAAA,UAAU,CAACoB,SAAS,EAAEP,aAAa,CAAC,CAAC;IACzC,OAAC,MAAM;IACH;YACAtC,EAAE,CAACsB,YAAY,CAACxB,SAAS,CAACwC,aAAa,CAAC,EAAED,aAAa,CAACrC,EAAE,CAAC,CAAA;IAC/D,OAAA;IACAsC,MAAAA,aAAa,GAAGT,WAAW,CAAC,EAAEK,aAAa,CAAC,CAAA;IAChD,KAAA;IACJ,GAAA;IACA;IACA;IACA;MACA,IAAIA,aAAa,IAAIE,WAAW,EAAE;QAC9B,KAAK,IAAIpL,CAAC,GAAGkL,aAAa,EAAElL,CAAC,IAAIoL,WAAW,EAAEpL,CAAC,EAAE,EAAE;UAC/C,IAAI8L,OAAO,GAAGhD,SAAS,CAAC+B,WAAW,CAAC7K,CAAC,CAAC,CAAC,CAAA;IACvC;IACA;IACA;IACA;IACA,MAAA,IAAI+L,MAAM,GAAGlB,WAAW,CAACO,WAAW,GAAG,CAAC,CAAC,GAAGM,WAAW,CAAC1C,EAAE,GAAG,IAAI,CAAC;IAClE;IACA;IACAA,MAAAA,EAAE,CAACsB,YAAY,CAACwB,OAAO,EAAEC,MAAM,CAAC,CAAC;IACrC,KAAA;IACJ,GAAA;IACA;MACA,IAAId,aAAa,IAAIE,WAAW,EAAE;QAC9B,KAAK,IAAInL,EAAC,GAAGiL,aAAa,EAAEjL,EAAC,IAAImL,WAAW,EAAEnL,EAAC,EAAE,EAAE;IAC/C;IACA,MAAA,IAAI4K,WAAW,CAAC5K,EAAC,CAAC,EAAE;IAChB,QAAA,IAAI8L,QAAO,GAAGlB,WAAW,CAAC5K,EAAC,CAAC,CAACgJ,EAAE,CAAA;IAC/BA,QAAAA,EAAE,CAACwB,WAAW,CAACsB,QAAO,CAAC,CAAA;IAC3B,OAAA;IACJ,KAAA;IACJ,GAAA;IACJ;;IC5PO,SAASE,aAAa,CAACnP,GAAG,EAAE;IAC/B;IACAA,EAAAA,GAAG,CAACM,SAAS,CAAC8O,OAAO,GAAG,UAAUhE,KAAK,EAAE;QACrC,IAAMzH,EAAE,GAAG,IAAI,CAAA;IACf,IAAA,IAAMwI,EAAE,GAAGxI,EAAE,CAACuI,GAAG,CAAA;IACjB;IACA;IACA,IAAA,IAAMmD,SAAS,GAAG1L,EAAE,CAAC2L,MAAM,CAAA;IAC3B;QACA3L,EAAE,CAAC2L,MAAM,GAAGlE,KAAK,CAAA;IACjB,IAAA,IAAIiE,SAAS,EAAE;IACX;IACA;IACApC,MAAAA,KAAK,CAACoC,SAAS,EAAEjE,KAAK,CAAC,CAAA;IAC3B,KAAC,MAAM;IACH;UACAzH,EAAE,CAACuI,GAAG,GAAGe,KAAK,CAACd,EAAE,EAAEf,KAAK,CAAC,CAAA;IAC7B,KAAA;OACH,CAAA;IACD;IACApL,EAAAA,GAAG,CAACM,SAAS,CAACiP,EAAE,GAAG,YAAY;IAC3B;IACA,IAAA,OAAOtE,kBAAkB,CAAA,KAAA,CAAA,KAAA,CAAA,EAAA,CAAC,IAAI,CAAA,CAAA,MAAA,CAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,IAAA,CAAKuE,SAAS,CAAC,CAAA,CAAA,CAAA;OAChD,CAAA;IACD;IACAxP,EAAAA,GAAG,CAACM,SAAS,CAACmP,EAAE,GAAG,YAAY;IAC3B;IACA;IACA;IACA,IAAA,OAAO7D,eAAe,CAAA,KAAA,CAAA,KAAA,CAAA,EAAA,CAAC,IAAI,CAAA,CAAA,MAAA,CAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,IAAA,CAAK4D,SAAS,CAAC,CAAA,CAAA,CAAA;OAC7C,CAAA;IACDxP,EAAAA,GAAG,CAACM,SAAS,CAACoP,EAAE,GAAG,UAAUjN,KAAK,EAAE;IAChC;IACA;IACA,IAAA,IAAI,QAAOA,KAAK,CAAA,KAAK,QAAQ,EAAE,OAAOA,KAAK,CAAA;IAC3C;IACA,IAAA,OAAOiH,IAAI,CAACC,SAAS,CAAClH,KAAK,CAAC,CAAA;OAC/B,CAAA;IACD;IACAzC,EAAAA,GAAG,CAACM,SAAS,CAACqP,OAAO,GAAG,YAAY;IAChC;IACA;IACA;IACA;QACA,OAAO,IAAI,CAAChK,QAAQ,CAACkF,MAAM,CAAC/I,IAAI,CAAC,IAAI,CAAC,CAAC;OAC1C,CAAA;IACL,CAAA;IACA;IACO,SAAS8N,cAAc,CAACjM,EAAE,EAAEwI,EAAE,EAAE;IACnC;IACAxI,EAAAA,EAAE,CAACuI,GAAG,GAAGC,EAAE,CAAC;IACZ;IACA;IACA;IACA;IACA,EAAA,IAAM0D,eAAe,GAAG,SAAlBA,eAAe,GAAS;IAC1BlM,IAAAA,EAAE,CAACyL,OAAO,CAACzL,EAAE,CAACgM,OAAO,EAAE,CAAC,CAAA;OAC3B,CAAA;IACD;MACA,IAAIjM,OAAO,CAACC,EAAE,EAAEkM,eAAe,EAAE,IAAI,CAAC,CAAC;IACvC;IACA;IACA;IACJ,CAAA;IACA;IACI;IACA;IACA;;IClEJ;IACO,SAAS7I,SAAS,CAAChH,GAAG,EAAE;IAC3B;IACAA,EAAAA,GAAG,CAACM,SAAS,CAACD,KAAK,GAAG,UAAUT,OAAO,EAAE;IACrC;IACA;QACA,IAAM+D,EAAE,GAAG,IAAI,CAAC;IAChB;IACAA,IAAAA,EAAE,CAACgC,QAAQ,GAAGhG,YAAY,CAAC,IAAI,CAACY,WAAW,CAACX,OAAO,EAAEA,OAAO,CAAC,CAAC;IAC9D;IACA;QACA6F,SAAS,CAAC9B,EAAE,CAAC,CAAA;IACb;QACA,IAAI/D,OAAO,CAACuM,EAAE,EAAE;IACZxI,MAAAA,EAAE,CAACgI,MAAM,CAAC/L,OAAO,CAACuM,EAAE,CAAC,CAAA;IACzB,KAAA;OACH,CAAA;IACD;IACAnM,EAAAA,GAAG,CAACM,SAAS,CAACqL,MAAM,GAAG,UAAUQ,EAAE,EAAE;IACjC;QACA,IAAMxI,EAAE,GAAG,IAAI,CAAA;IACf;IACAwI,IAAAA,EAAE,GAAGC,QAAQ,CAAC0D,aAAa,CAAC3D,EAAE,CAAC,CAAA;IAC/B;IACA,IAAA,IAAI4D,GAAG,GAAGpM,EAAE,CAACgC,QAAQ,CAAA;IACrB,IAAA,IAAI,CAACoK,GAAG,CAAClF,MAAM,EAAE;IAAE;IACf,MAAA,IAAID,QAAQ,CAAC;IACb;IACA,MAAA,IAAI,CAACmF,GAAG,CAACnF,QAAQ,IAAIuB,EAAE,EAAE;IAAE;IACvB;IAChB;IACA;IACA;IACA;IACA;IACgBvB,QAAAA,QAAQ,GAAGuB,EAAE,CAAC6D,SAAS,CAAE;IAC7B,OAAC,MAAM;IACH;IACI;IACA;YACApF,QAAQ,GAAGmF,GAAG,CAACnF,QAAQ,CAAA;IAC3B;IACJ,OAAA;IACA;IACA,MAAA,IAAIA,QAAQ,EAAE;IACV;IACA,QAAA,IAAMC,MAAM,GAAGF,iBAAiB,CAACC,QAAQ,CAAC,CAAA;YAC1CmF,GAAG,CAAClF,MAAM,GAAGA,MAAM,CAAA;IACvB,OAAA;IACJ,KAAA;IACA;IACA;IACA+E,IAAAA,cAAc,CAACjM,EAAE,EAAEwI,EAAE,CAAC,CAAA;IACtB;IACA;OACH,CAAA;IACL;;ICxDA;IACA,SAASnM,GAAG,CAACJ,OAAO,EAAE;IAAE;IACpB,EAAA,IAAI,CAACS,KAAK,CAACT,OAAO,CAAC,CAAC;IACpB;IACJ,CAAA;IACA;IACAoH,SAAS,CAAChH,GAAG,CAAC,CAAA;IACdmP,aAAa,CAACnP,GAAG,CAAC,CAAC;IACnBD,aAAa,CAACC,GAAG,CAAC,CAAA;IAClB8G,cAAc,CAAC9G,GAAG,CAAC;;;;;;;;"}